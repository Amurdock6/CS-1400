"e","# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
","","0","1650570721581","main.py","1.1.12 for 2019-2020 @t1"
"a","Outside edit","","","1650570723061",".gitignore","1.1.12 for 2019-2020 @t1"
"a","Outside edit","","","1650570723061","main.py","1.1.12 for 2019-2020 @t1"
"x","true","true","true","1650570723062","a02363876@usu.edu","1.1.12 for 2019-2020 @t1"
"a","PyPhanon Init","","","1650570723062","PyPhanon Init","1.1.12 for 2019-2020 @t1"
"e","","# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


def print_hi(name):
    # Use a breakpoint in the code line below to debug your script.
    print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    print_hi('PyCharm')

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
","0","1650570725446","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
#
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker
#

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0,len(maze)):
        for j in range(0,len(maze[i])):
            print(maze[i][j],end="""")
        print()
    time.sleep(SLEEPTIME)
    print()
    

def main():
    maze = []
    readMaze(maze)
    if not solve(maze,1,0):
        print(""no solution is possible."")
    else:
        printMaze(maze)



main()
",,"0","1650570743307","main.py","1.1.12 for 2019-2020 @t1"
"e","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
#
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker
#

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0,len(maze)):
        for j in range(0,len(maze[i])):
            print(maze[i][j],end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze,1,0):
        print(""no solution is possible."")
    else:
        printMaze(maze)



main()
","","0","1650570743319","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","78","1650570743400","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","534","1650570743410","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","572","1650570743416","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","617","1650570743422","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","749","1650570743428","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","752","1650570743434","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","835","1650570743441","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","170","1650570754216","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","170","1650570754648","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"171","1650570754652","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","171","1650570754810","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"172","1650570754815","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","172","1650570755134","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"173","1650570755135","main.py","1.1.12 for 2019-2020 @t1"
"e","V","","173","1650570755496","main.py","1.1.12 for 2019-2020 @t1"
"k","V",,"174","1650570755496","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","174","1650570755899","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"175","1650570755905","main.py","1.1.12 for 2019-2020 @t1"
"e","R","","175","1650570756108","main.py","1.1.12 for 2019-2020 @t1"
"k","R",,"176","1650570756114","main.py","1.1.12 for 2019-2020 @t1"
"e","BOSE","","176","1650570756870","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","180","1650570757866","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"181","1650570757867","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","181","1650570758033","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"182","1650570758034","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","182","1650570758233","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"183","1650570758234","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","183","1650570762319","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"184","1650570762320","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","184","1650570762452","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"185","1650570762459","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","185","1650570762556","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"186","1650570762562","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","186","1650570762636","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"187","1650570762641","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","187","1650570763742","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","188","1650570763748","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"188","1650570763750","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","188","1650570764175","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"189","1650570764176","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","189","1650570764374","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"190","1650570764382","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","190","1650570764620","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"191","1650570764628","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","191","1650570764837","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"192","1650570764838","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: print(maze)","170","1650570771948","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","170","1650570773200","main.py","1.1.12 for 2019-2020 @t1"
"p","DIM = 6
DELAY = 0
import time


def knight(board,num,r,c):
# can we solve the problem with the board as it is? 
# by putting the next number down?  if we are at r,c?
# return true is solved, else return false if we can't solve it.

    if num==DIM*DIM+1: return True
    if r<0: return False
    if c<0: return False
    if r>=DIM: return False
    if c>=DIM: return False
    if board[r][c]>=0: return False

    board[r][c]=num
    #printboard(board)
    if knight(board,num+1,r+1,c+2): return True
    if knight(board,num+1,r-1,c+2): return True
    if knight(board,num+1,r+1,c-2): return True
    if knight(board,num+1,r-1,c-2): return True
    if knight(board,num+1,r+2,c+1): return True
    if knight(board,num+1,r-2,c+1): return True
    if knight(board,num+1,r+2,c-1): return True
    if knight(board,num+1,r-2,c-1): return True
    board[r][c]=-1
    #printboard(board)
    return False
    
    


def printboard(b):
    time.sleep(DELAY)
    for i in range(0,DIM):
        for j in range(0,DIM):
            if b[i][j]==-1: print("" ."",end="" "")
            else:print(format(b[i][j],""2d""),end="" "")
        print()
    print()

def main():
    board = []
    for i in range(0,DIM):
        board.append([])

    for i in range(0,DIM):
        for j in range(0,DIM):
            board[i].append(-1)


    knight(board,1,1,1)

    printboard(board)


main()


",,"77","1650570811155","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","59","1650570811199","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","116","1650570811203","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","174","1650570811207","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","447","1650570811217","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","874","1650570811223","main.py","1.1.12 for 2019-2020 @t1"
"e","","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True


# TODO:","0","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","DIM = 6
DELAY = 0
import time


def knight(board,num,r,c):
# can we solve the problem","","0","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e","","r","87","1650570811172","main.py","1.1.12 for 2019-2020 @t1"
"e","","e all your code below this line
#
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker
#

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()","89","1650570811173","main.py","1.1.12 for 2019-2020 @t1"
"e","h the board as it is? 
# by putting the next number down?  if we are at r,c?
# return true is solved, else return false if we can't solve it.

    if num==DIM*DIM+1: return True
    if r<0: return False
    if c<0: return False
    if r>=DIM: return False
    if c>=DIM: return False
    if board[r][c]>=0: return False

    board[r][c]=num
    #printboard(board)
    if knight(board,num+1,r+1,c+2): return True
    if knight(board,num+1,r-1,c+2): return True
    if knight(board,num+1,r+1,c-2): return True
    if knight(board,num+1,r-1,c-2): return True
    if knight(board,num+1,r+2,c+1): return True
    if knight(board,num+1,r-2,c+1): return True
    if knight(board,num+1,r+2,c-1): return True
    if knight(board,num+1,r-2,c-1): return True
    board[r][c]=-1
    #printboard(board)
    return False","","89","1650570811174","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","898","1650570811175","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maze(maze):
    print(""\n\n\n\n\n\n\n\n\n""","909","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","board(b):
    time.sleep(DELAY","","909","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e",""," len(maze)","962","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","DIM","","962","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e",""," len(maze[i])):","993","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","DIM):
            if b[i][j]==-1: print("" ."",end="" "")","","993","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e","else:","","1059","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","","maze","1070","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e","format(b","","1070","1650570811172","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1085","1650570811173","main.py","1.1.12 for 2019-2020 @t1"
"e","""2d""),","","1085","1650570811174","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1096","1650570811175","main.py","1.1.12 for 2019-2020 @t1"
"e","","time.sleep(SLEEPTIME)
    ","1120","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1129","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","","maze","1145","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","board","","1145","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e","","readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze","1160","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","for i in range(0,DIM):
        board.append([])

    for i in range(0,DIM):
        for j in range(0,DIM):
            board[i].append(-1)


    knight(board,1,1,1)

    printboard(board","","1160","1650570811171","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","1357","1650570811170","main.py","1.1.12 for 2019-2020 @t1"
"e","","6","6","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","48","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","53","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","56","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","256","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","259","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","","*DIM+","263","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," * DIM + ","","263","1650570885508","main.py","1.1.12 for 2019-2020 @t1"
"e","","<","295","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," < ","","295","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","","<","322","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," < ","","322","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","349","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","352","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","379","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","382","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","419","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","422","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","","=","455","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," = ","","455","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","506","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r+1,c+","510","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r + 1, c + ","","510","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","563","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r-1,c+","567","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r - 1, c + ","","567","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","620","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r+1,c-","624","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r + 1, c - ","","624","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","677","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r-1,c-","681","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r - 1, c - ","","681","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","734","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r+2,c+","738","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r + 2, c + ","","738","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","791","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r-2,c+","795","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r - 2, c + ","","795","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","848","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r+2,c-","852","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r + 2, c - ","","852","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","905","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","+1,r-2,c-","909","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," + 1, r - 2, c - ","","909","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e","","=","957","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," = ","","957","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","","

","1006","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1068","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1100","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1129","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1132","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","
               ","","1136","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1164","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","
                ","","1191","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1229","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1236","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","1275","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1324","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1378","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1410","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1450","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1467","1650570885505","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1470","1650570885506","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1473","1650570885507","main.py","1.1.12 for 2019-2020 @t1"
"e","8","","6","1650570886094","main.py","1.1.12 for 2019-2020 @t1"
"k","8",,"7","1650570886096","main.py","1.1.12 for 2019-2020 @t1"
"e","","8","6","1650570989225","main.py","1.1.12 for 2019-2020 @t1"
"e","5","","6","1650570989675","main.py","1.1.12 for 2019-2020 @t1"
"k","5",,"7","1650570989676","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","16","1650570992505","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","16","1650570993000","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"17","1650570993001","main.py","1.1.12 for 2019-2020 @t1"
"e","","5","6","1650571000046","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","6","1650571000694","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"7","1650571000696","main.py","1.1.12 for 2019-2020 @t1"
"e","","1","6","1650571006052","main.py","1.1.12 for 2019-2020 @t1"
"e","2","","6","1650571006677","main.py","1.1.12 for 2019-2020 @t1"
"k","2",,"7","1650571006678","main.py","1.1.12 for 2019-2020 @t1"
"e","","2","6","1650571012053","main.py","1.1.12 for 2019-2020 @t1"
"e","5","","6","1650571012238","main.py","1.1.12 for 2019-2020 @t1"
"k","5",,"7","1650571012239","main.py","1.1.12 for 2019-2020 @t1"
"e","","5","6","1650571017642","main.py","1.1.12 for 2019-2020 @t1"
"e","4","","6","1650571018279","main.py","1.1.12 for 2019-2020 @t1"
"k","4",,"7","1650571018281","main.py","1.1.12 for 2019-2020 @t1"
"e","","4","6","1650571023850","main.py","1.1.12 for 2019-2020 @t1"
"e","6","","6","1650571024242","main.py","1.1.12 for 2019-2020 @t1"
"k","6",,"7","1650571024242","main.py","1.1.12 for 2019-2020 @t1"
"e","","6","6","1650571033384","main.py","1.1.12 for 2019-2020 @t1"
"e","7","","6","1650571033659","main.py","1.1.12 for 2019-2020 @t1"
"k","7",,"7","1650571033660","main.py","1.1.12 for 2019-2020 @t1"
"e","","DIM = 7
DELAY = 1
import time


def knight(board, num, r, c):
    # can we solve the problem with the board as it is? 
    # by putting the next number down?  if we are at r,c?
    # return true is solved, else return false if we can't solve it.

    if num == DIM * DIM + 1: return True
    if r < 0: return False
    if c < 0: return False
    if r >= DIM: return False
    if c >= DIM: return False
    if board[r][c] >= 0: return False

    board[r][c] = num
    # printboard(board)
    if knight(board, num + 1, r + 1, c + 2): return True
    if knight(board, num + 1, r - 1, c + 2): return True
    if knight(board, num + 1, r + 1, c - 2): return True
    if knight(board, num + 1, r - 1, c - 2): return True
    if knight(board, num + 1, r + 2, c + 1): return True
    if knight(board, num + 1, r - 2, c + 1): return True
    if knight(board, num + 1, r + 2, c - 1): return True
    if knight(board, num + 1, r - 2, c - 1): return True
    board[r][c] = -1
    # printboard(board)
    return False


def printboard(b):
    time.sleep(DELAY)
    for i in range(0, DIM):
        for j in range(0, DIM):
            if b[i][j] == -1:
                print("" ."", end="" "")
            else:
                print(format(b[i][j], ""2d""), end="" "")
        print()
    print()


def main():
    board = []
    for i in range(0, DIM):
        board.append([])

    for i in range(0, DIM):
        for j in range(0, DIM):
            board[i].append(-1)

    knight(board, 1, 1, 1)

    printboard(board)


main()


","0","1650571042110","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
#
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker
#

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0,len(maze)):
        for j in range(0,len(maze[i])):
            print(maze[i][j],end="""")
        print()
    time.sleep(SLEEPTIME)
    print()
    

def main():
    maze = []
    readMaze(maze)
    if not solve(maze,1,0):
        print(""no solution is possible."")
    else:
        printMaze(maze)



main()
",,"0","1650571047731","main.py","1.1.12 for 2019-2020 @t1"
"e","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
#
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker
#

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0,len(maze)):
        for j in range(0,len(maze[i])):
            print(maze[i][j],end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze,1,0):
        print(""no solution is possible."")
    else:
        printMaze(maze)



main()
","","0","1650571047736","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","78","1650571047750","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","534","1650571047754","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","572","1650571047758","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","617","1650571047763","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","749","1650571047767","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","752","1650571047771","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","835","1650571047776","main.py","1.1.12 for 2019-2020 @t1"
"e","","#","210","1650571073311","main.py","1.1.12 for 2019-2020 @t1"
"e","","#","123","1650571074929","main.py","1.1.12 for 2019-2020 @t1"
"e","","solve(maze, 1, 0)","736","1650571136791","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","Lockout","61861","1650571137150","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","-1:-1:-1","61861","1650571138719","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","735","1650571139181","main.py","1.1.12 for 2019-2020 @t1"
"e","","t","734","1650571140666","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","733","1650571140840","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","732","1650571141025","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","731","1650571141226","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","731","1650571148049","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","732","1650571148056","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","733","1650571148061","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","734","1650571148065","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","735","1650571148069","main.py","1.1.12 for 2019-2020 @t1"
"e","solve(maze, 1, 0)","","736","1650571148073","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","123","1650571163246","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"124","1650571163248","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","124","1650571163398","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"125","1650571163404","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","125","1650571163493","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"126","1650571163499","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","126","1650571163600","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"127","1650571163601","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","127","1650571163789","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"128","1650571163790","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","128","1650571164237","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"129","1650571164244","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","129","1650571164470","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"130","1650571164471","main.py","1.1.12 for 2019-2020 @t1"
"e","v","","130","1650571164605","main.py","1.1.12 for 2019-2020 @t1"
"k","v",,"131","1650571164607","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","131","1650571164737","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"132","1650571164738","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","132","1650571168755","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"133","1650571168756","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","134","1650571169728","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","134","1650571169736","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","123","1650571185490","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","124","1650571185767","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","124","1650571189112","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"125","1650571189113","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","125","1650571189256","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"126","1650571189261","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","126","1650571189405","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"127","1650571189405","main.py","1.1.12 for 2019-2020 @t1"
"e","V","","127","1650571190079","main.py","1.1.12 for 2019-2020 @t1"
"k","V",,"128","1650571190080","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","128","1650571190388","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"129","1650571190406","main.py","1.1.12 for 2019-2020 @t1"
"e","R","","129","1650571190663","main.py","1.1.12 for 2019-2020 @t1"
"k","R",,"130","1650571190675","main.py","1.1.12 for 2019-2020 @t1"
"e","BOSE","","130","1650571190993","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","134","1650571192622","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"135","1650571192622","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","135","1650571192781","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"136","1650571192781","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","136","1650571193346","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"137","1650571193347","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","137","1650571193444","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"138","1650571193448","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","138","1650571193594","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"139","1650571193599","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","139","1650571193730","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"140","1650571193733","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","140","1650571194036","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"141","1650571194041","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","141","1650571194453","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"142","1650571194460","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","142","1650571195001","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"143","1650571195002","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","143","1650571195303","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"144","1650571195304","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","144","1650571195588","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"145","1650571195589","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","145","1650571196317","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","146","1650571196322","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"146","1650571196322","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","146","1650571197553","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"147","1650571197554","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","147","1650571197715","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"148","1650571197723","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","148","1650571198010","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"149","1650571198016","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","149","1650571198226","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"150","1650571198227","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","151","1650571199837","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"152","1650571199838","main.py","1.1.12 for 2019-2020 @t1"
"e","",":","151","1650571200578","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: printMaze(maze)","124","1650571205153","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","136","1650571206415","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","136","1650571206422","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"140","1650571206642","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","136","1650571206648","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: printMaze(maze)","","136","1650571206651","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","152","1650571212780","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","153","1650571212787","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: 
        printMaze(maze)","140","1650571222504","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: 
        printMaze(maze)",,"123","1650571225918","main.py","1.1.12 for 2019-2020 @t1"
"e","if VERBOSE: 
        printMaze(maze)","","123","1650571225937","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","143","1650571242596","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","140","1650571242600","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","139","1650571242793","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","136","1650571242802","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","135","1650571243076","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","135","1650571253880","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"136","1650571253881","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","136","1650571254063","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"137","1650571254067","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","137","1650571254199","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"138","1650571254205","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","138","1650571254974","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"139","1650571254975","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","138","1650571255869","main.py","1.1.12 for 2019-2020 @t1"
"e","","f","137","1650571256050","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","136","1650571256227","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","135","1650571256624","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","135","1650571257891","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","136","1650571257899","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","139","1650571261407","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","136","1650571261413","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","135","1650571261874","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: printMaze(maze)","123","1650571270664","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","136","1650571271871","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","136","1650571271879","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"140","1650571272499","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","136","1650571272504","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: printMaze(maze)","","136","1650571272508","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","124","1650571274288","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","123","1650571274619","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","150","1650571278371","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","151","1650571278380","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","175","1650571280299","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","182","1650571280904","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","179","1650571280909","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","132","1650571286340","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","133","1650571286345","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"133","1650571286346","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","190","1650571291815","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","187","1650571291822","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","187","1650571291993","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","185","1650571292314","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","182","1650571292318","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","182","1650571292622","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","268","1650571295775","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: 
        printMaze(maze)","140","1650572362874","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","Lockout","1067098","1650572363207","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","-1:-1:-1","1067098","1650572364607","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","122","1650572369084","main.py","1.1.12 for 2019-2020 @t1"
"e","#  ","","122","1650572369588","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","122","1650572369593","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","124","1650572370926","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","124","1650572371305","main.py","1.1.12 for 2019-2020 @t1"
"e","","#","123","1650572371699","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","123","1650572373386","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","124","1650572377873","main.py","1.1.12 for 2019-2020 @t1"
"e","c","","123","1650572380079","main.py","1.1.12 for 2019-2020 @t1"
"k","c",,"124","1650572380082","main.py","1.1.12 for 2019-2020 @t1"
"e","","c","123","1650572380753","main.py","1.1.12 for 2019-2020 @t1"
"e","C","","123","1650572381063","main.py","1.1.12 for 2019-2020 @t1"
"k","C",,"124","1650572381063","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","124","1650572381454","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"125","1650572381461","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","125","1650572381574","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"126","1650572381574","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","126","1650572381829","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"127","1650572381829","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","127","1650572382022","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"128","1650572382023","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","128","1650572382224","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"129","1650572382226","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","128","1650572384518","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","127","1650572384699","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","126","1650572384874","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","125","1650572385033","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","124","1650572385220","main.py","1.1.12 for 2019-2020 @t1"
"e","","C","123","1650572385516","main.py","1.1.12 for 2019-2020 @t1"
"e","c","","123","1650572385981","main.py","1.1.12 for 2019-2020 @t1"
"k","c",,"124","1650572385981","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","124","1650572386125","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"125","1650572386130","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","125","1650572386429","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"126","1650572386435","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","126","1650572386660","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"127","1650572386676","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","127","1650572386719","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"128","1650572386725","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","127","1650572387351","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","127","1650572387554","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"128","1650572387554","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","128","1650572387880","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"129","1650572387882","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","129","1650572388344","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"130","1650572388345","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","129","1650572388940","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","129","1650572389325","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"130","1650572389326","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","130","1650572389723","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"131","1650572389724","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","131","1650572390019","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"132","1650572390019","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","132","1650572390550","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"133","1650572390551","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","133","1650572391344","main.py","1.1.12 for 2019-2020 @t1"
"k",")",,"134","1650572391347","main.py","1.1.12 for 2019-2020 @t1"
"e","",")","133","1650572392038","main.py","1.1.12 for 2019-2020 @t1"
"e","_","","133","1650572392360","main.py","1.1.12 for 2019-2020 @t1"
"k","_",,"134","1650572392361","main.py","1.1.12 for 2019-2020 @t1"
"e","C","","134","1650572392580","main.py","1.1.12 for 2019-2020 @t1"
"k","C",,"135","1650572392582","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","135","1650572392966","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"136","1650572392967","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","136","1650572393468","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"137","1650572393469","main.py","1.1.12 for 2019-2020 @t1"
"e","w","","137","1650572393767","main.py","1.1.12 for 2019-2020 @t1"
"k","w",,"138","1650572393769","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","138","1650572394751","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"139","1650572394752","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","139","1650572394870","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"140","1650572394872","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","140","1650572394986","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"141","1650572394987","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","141","1650572395382","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"142","1650572395383","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","144","1650572395626","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","143","1650572395632","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","141","1650572402012","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","142","1650572402017","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"142","1650572402018","main.py","1.1.12 for 2019-2020 @t1"
"k",")",,"143","1650572402103","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","142","1650572405941","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"143","1650572405943","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","143","1650572406046","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"144","1650572406052","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","144","1650572406300","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"145","1650572406319","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","145","1650572406489","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"146","1650572406490","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","146","1650572406632","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"147","1650572406633","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","147","1650572407082","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"148","1650572407083","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","147","1650572408512","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","146","1650572408664","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","145","1650572408858","main.py","1.1.12 for 2019-2020 @t1"
"e","","z","144","1650572409033","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","143","1650572409214","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","142","1650572409391","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","145","1650572410484","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","145","1650572410491","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","149","1650572411313","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"150","1650572411314","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","150","1650572411484","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"151","1650572411489","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","151","1650572411610","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"152","1650572411622","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","152","1650572411848","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"153","1650572411848","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","153","1650572412003","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"154","1650572412004","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","154","1650572412121","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"155","1650572412125","main.py","1.1.12 for 2019-2020 @t1"
"e","","in","153","1650572412610","main.py","1.1.12 for 2019-2020 @t1"
"e","__init__(self)","","153","1650572412611","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","167","1650572412619","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","166","1650572414531","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"167","1650572414532","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","167","1650572414661","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"168","1650572414663","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","168","1650572415173","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"169","1650572415174","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","168","1650572415617","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","168","1650572415875","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"169","1650572415875","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","169","1650572416008","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"170","1650572416011","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","170","1650572416223","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"171","1650572416226","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","171","1650572416563","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"172","1650572416564","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","172","1650572416739","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"173","1650572416740","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","173","1650572417193","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"174","1650572417193","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","174","1650572420212","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"175","1650572420215","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","175","1650572421570","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"176","1650572421571","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","176","1650572421802","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"177","1650572421803","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","177","1650572421950","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"178","1650572421952","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","177","1650572422867","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","176","1650572423070","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","175","1650572423265","main.py","1.1.12 for 2019-2020 @t1"
"e","","1","174","1650572423475","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","173","1650572423670","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","172","1650572423941","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maze_Crawler","129","1650572427443","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","129","1650572427447","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"130","1650572427448","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","130","1650572427541","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"131","1650572427546","main.py","1.1.12 for 2019-2020 @t1"
"e","c","","131","1650572427772","main.py","1.1.12 for 2019-2020 @t1"
"k","c",,"132","1650572427773","main.py","1.1.12 for 2019-2020 @t1"
"e","","c","131","1650572428213","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","131","1650572428860","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"132","1650572428861","main.py","1.1.12 for 2019-2020 @t1"
"e","v","","132","1650572428966","main.py","1.1.12 for 2019-2020 @t1"
"k","v",,"133","1650572428967","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","133","1650572429139","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"134","1650572429141","main.py","1.1.12 for 2019-2020 @t1"
"e","","    

def solve():
","168","1650572431222","main.py","1.1.12 for 2019-2020 @t1"
"e","",")","135","1650572433125","main.py","1.1.12 for 2019-2020 @t1"
"e","","(","134","1650572433254","main.py","1.1.12 for 2019-2020 @t1"
"p","import os

class Maze_Crawler:
    def __init__(self):
        self.maze = []
        
    def load_maze(self, path):
        
        rows = []
        
        with open(path, 'r') as f:
            rows = f.readlines()
        
        for i in range(len(rows)):
            self.maze.append([])
        
            for j in range(len(rows[i])-1):
                self.maze[i].append(rows[i][j])
        
        return self.maze
    
    def get_start_coor(self):
        for i in range(len(self.maze)):
            for j in range(len(self.maze[i])):
                if self.maze[i][j] == 'S':
                    return i, j
        return -1, -1
    
    def solve_maze(self, coor):
        x, y = coor
        
        if self.maze[x][y] == '#' or self.maze[x][y] == 'X':
            return False
        
        if self.maze[x][y] == 'E':
            return True
        
        
        if self.maze[x][y] != 'S':
            self.maze[x][y] = 'X'
        
        if self.solve_maze((x+1, y)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = 'v'
            
        elif self.solve_maze((x-1, y)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '^'
            
        elif self.solve_maze((x, y+1)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '>'
            
        elif self.solve_maze((x, y-1)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '<'
        else:
            return False
        
        return True
      
    def show_solution(self):
        for i in range(len(self.maze)):
            r = ''
            for j in range(len(self.maze[i])):
                if self.maze[i][j] == 'X':
                    r +=  ' '
                else:
                    r += self.maze[i][j]
            print(r)",,"175","1650572544450","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","11","1650572544495","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","308","1650572544500","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","310","1650572544505","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","805","1650572544509","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","904","1650572544514","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","906","1650572544518","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1024","1650572544522","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1026","1650572544526","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1147","1650572544530","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1149","1650572544534","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1267","1650572544538","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1269","1650572544542","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1615","1650572544547","main.py","1.1.12 for 2019-2020 @t1"
"e","","time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True


# TODO: write all your code below this line
class Solve","7","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","os

class Maze_Crawler","","7","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","",", maze","52","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","","
    
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO:","59","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","    self.maze = []

    def load_maze(self, path):

        rows = []

       ","","59","1650572544460","main.py","1.1.12 for 2019-2020 @t1"
"e","","r","139","1650572544461","main.py","1.1.12 for 2019-2020 @t1"
"e","","e all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
","141","1650572544462","main.py","1.1.12 for 2019-2020 @t1"
"e","h open(path, 'r') as f:
            rows = f.readlines()

  ","","141","1650572544463","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","205","1650572544464","main.py","1.1.12 for 2019-2020 @t1"
"e","","line in mazefile.read().splitlines(","211","1650572544465","main.py","1.1.12 for 2019-2020 @t1"
"e","i in range(len(rows)","","211","1650572544466","main.py","1.1.12 for 2019-2020 @t1"
"e","    self.","","242","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","
  ","","267","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","278","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","","c","284","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","j","","284","1650572544460","main.py","1.1.12 for 2019-2020 @t1"
"e","","line:
","289","1650572544461","main.py","1.1.12 for 2019-2020 @t1"
"e","range(len(rows[i])-1):
    ","","289","1650572544462","main.py","1.1.12 for 2019-2020 @t1"
"e","self.","","328","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","","-1","338","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","338","1650572544460","main.py","1.1.12 for 2019-2020 @t1"
"e","","c","348","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","rows[i][j]","","348","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","360","1650572544460","main.py","1.1.12 for 2019-2020 @t1"
"e","","mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
","365","1650572544461","main.py","1.1.12 for 2019-2020 @t1"
"e","    return self.maze

    def get_start_coor(self):
    ","","365","1650572544462","main.py","1.1.12 for 2019-2020 @t1"
"e","","0, ","440","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","self.","","444","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","465","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","","0, ","484","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","self.","","488","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","","print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not ","516","1650572544458","main.py","1.1.12 for 2019-2020 @t1"
"e","    if self.maze[i][j] == 'S':
                    return i, j
        return -1, -1

    def solve_maze(self, coor):
        x, y = coor

        if self.maze[x][y] == '#' or self.maze[x][y] == 'X':
            return False

        if self.maze[x][y] == 'E':
            return True


        if self.maze[x][y] != 'S':
            self.maze[x][y] = 'X'

        if self.solve_maze((x+1, y)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = 'v'

        elif self.solve_maze((x-1, y)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '^'

        elif self.solve_maze((x, y+1)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '>'

        elif self.","","516","1650572544459","main.py","1.1.12 for 2019-2020 @t1"
"e","","(","1248","1650572544460","main.py","1.1.12 for 2019-2020 @t1"
"e","_","","1248","1650572544461","main.py","1.1.12 for 2019-2020 @t1"
"e","",", 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
","1253","1650572544462","main.py","1.1.12 for 2019-2020 @t1"
"e","((x, y-1)):
            if self.maze[x][y] != 'S':
                self.maze[x][y] = '<'
        else:
            return False

        return True

    def show_solution(self):
        for i in range(len(self.maze)):
            r = ''
            for j in range(len(self.maze[i])):
                if self.maze[i][j] == 'X':
                    r +=  ' '
                else:
                    r += self.maze[i][j]
            print(r)","","1253","1650572544463","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","11","1650572548593","main.py","1.1.12 for 2019-2020 @t1"
"e","
            ","","1702","1650572687179","main.py","1.1.12 for 2019-2020 @t1"
"e","
            ","","1715","1650572687610","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1727","1650572687956","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1724","1650572687959","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1723","1650572688163","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1720","1650572688167","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1719","1650572688407","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1716","1650572688421","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","1716","1650572688968","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"1717","1650572688969","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1717","1650572689132","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1718","1650572689138","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","1718","1650572689208","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"1719","1650572689213","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","1719","1650572689246","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"1720","1650572689250","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","1719","1650572694378","main.py","1.1.12 for 2019-2020 @t1"
"e","","i","1718","1650572694567","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","1717","1650572694771","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","1716","1650572695067","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","1716","1650572695196","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"1717","1650572695197","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","1717","1650572695372","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"1718","1650572695378","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","1718","1650572695465","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"1719","1650572695471","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1719","1650572696263","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"1720","1650572696263","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","1720","1650572696448","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"1721","1650572696449","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1721","1650572696615","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1722","1650572696620","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","1722","1650572696627","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"1723","1650572696628","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","1723","1650572696722","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"1724","1650572696725","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","1724","1650572697383","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","1725","1650572697390","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"1725","1650572697390","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","1726","1650572699815","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"1727","1650572699817","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","1727","1650572700011","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","1728","1650572700019","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","1732","1650572706971","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"1733","1650572706972","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1733","1650572707184","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1734","1650572707191","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","1734","1650572707548","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"1735","1650572707560","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","1735","1650572707815","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"1736","1650572707819","main.py","1.1.12 for 2019-2020 @t1"
"e","_Crawler","","1736","1650572708111","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","1744","1650572709840","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","1749","1650572710315","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1753","1650572710592","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1750","1650572710597","main.py","1.1.12 for 2019-2020 @t1"
"e","\","","1750","1650572711203","main.py","1.1.12 for 2019-2020 @t1"
"k","\",,"1751","1650572711204","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","1751","1650572711628","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"1752","1650572711629","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1752","1650572711747","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1753","1650572711752","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","1753","1650572711774","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"1754","1650572711777","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","1754","1650572711851","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"1755","1650572711855","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","1754","1650572712284","main.py","1.1.12 for 2019-2020 @t1"
"e","","i","1753","1650572712467","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","1752","1650572712640","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","1751","1650572712799","main.py","1.1.12 for 2019-2020 @t1"
"e","","\","1750","1650572712973","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","1750","1650572713370","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"1751","1650572713370","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1751","1650572713555","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1752","1650572713560","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","1752","1650572713675","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"1753","1650572713679","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","1753","1650572713751","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"1754","1650572713756","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","1754","1650572714346","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","1755","1650572714350","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"1755","1650572714351","main.py","1.1.12 for 2019-2020 @t1"
"e","            
","","1716","1650572719741","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","1763","1650572721195","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","1774","1650572723352","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","11","1650572734344","main.py","1.1.12 for 2019-2020 @t1"
"e","","_","22","1650572741276","main.py","1.1.12 for 2019-2020 @t1"
"e","","_","1749","1650572744561","main.py","1.1.12 for 2019-2020 @t1"
"e","
        ","","77","1650572888201","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","85","1650572889463","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","82","1650572889484","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","81","1650572889692","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","78","1650572889710","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","79","1650572890025","main.py","1.1.12 for 2019-2020 @t1"
"p","FILENAME = ""maze.txt""",,"10","1650572996295","main.py","1.1.12 for 2019-2020 @t1"
"e","FILENAME = ""maze.txt""","","10","1650572996301","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","10","1650572997802","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","34","1650572999538","main.py","1.1.12 for 2019-2020 @t1"
"p","mazefile = open(FILENAME, ""r"")",,"133","1650573024130","main.py","1.1.12 for 2019-2020 @t1"
"e","        mazefile = open(FILENAME, ""r"")","","133","1650573024136","main.py","1.1.12 for 2019-2020 @t1"
"e","","mazefile","141","1650573026427","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","141","1650573026430","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"142","1650573026431","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","142","1650573026539","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"143","1650573026543","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","143","1650573026715","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"144","1650573026719","main.py","1.1.12 for 2019-2020 @t1"
"e","h","","144","1650573026790","main.py","1.1.12 for 2019-2020 @t1"
"k","h",,"145","1650573026795","main.py","1.1.12 for 2019-2020 @t1"
"e","","h","144","1650573028409","main.py","1.1.12 for 2019-2020 @t1"
"e","","t","143","1650573028412","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","142","1650573028415","main.py","1.1.12 for 2019-2020 @t1"
"e","","p","141","1650573028418","main.py","1.1.12 for 2019-2020 @t1"
"e","mazefile","","141","1650573028422","main.py","1.1.12 for 2019-2020 @t1"
"p","FILENAME",,"213","1650573036539","main.py","1.1.12 for 2019-2020 @t1"
"e","","path","209","1650573036544","main.py","1.1.12 for 2019-2020 @t1"
"e","FILENAME","","209","1650573036545","main.py","1.1.12 for 2019-2020 @t1"
"e","","    mazefile = open(FILENAME, ""r"")
    ","137","1650573039008","main.py","1.1.12 for 2019-2020 @t1"
"e","","path","126","1650573040913","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","125","1650573041112","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","124","1650573041332","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","145","1650573046133","main.py","1.1.12 for 2019-2020 @t1"
"e","
        ","","153","1650573046902","main.py","1.1.12 for 2019-2020 @t1"
"p","MazeCrawler",,"1784","1650573080065","main.py","1.1.12 for 2019-2020 @t1"
"e","","def main():
    MazeCrawler
    
    
main()","1757","1650573339135","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1757","1650573339569","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1755","1650573339778","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1752","1650573339783","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1751","1650573340186","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1748","1650573340191","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1747","1650573340394","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1744","1650573340398","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1744","1650573340717","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1742","1650573341462","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1739","1650573341466","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1738","1650573341656","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1735","1650573341660","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1734","1650573341851","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","1731","1650573341855","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1731","1650573342142","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","8","1650573380367","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","7","1650573380528","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","7","1650573380879","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"8","1650573380880","main.py","1.1.12 for 2019-2020 @t1"
"e","y","","8","1650573381001","main.py","1.1.12 for 2019-2020 @t1"
"k","y",,"9","1650573381005","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","9","1650573381103","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"10","1650573381107","main.py","1.1.12 for 2019-2020 @t1"
"e","","sys","7","1650573421458","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","7","1650573421462","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"8","1650573421462","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","8","1650573421547","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"9","1650573421552","main.py","1.1.12 for 2019-2020 @t1"
"e","",">","1256","1650573467130","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","1256","1650573467497","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"1257","1650573467498","main.py","1.1.12 for 2019-2020 @t1"
"e","","<","1376","1650573469878","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","1376","1650573470118","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"1377","1650573470118","main.py","1.1.12 for 2019-2020 @t1"
"e","","^","1136","1650573472830","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","1136","1650573473001","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"1137","1650573473002","main.py","1.1.12 for 2019-2020 @t1"
"e","","v","1016","1650573475850","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","1016","1650573476083","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"1017","1650573476084","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","33","1650573502532","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"34","1650573502533","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","34","1650573503369","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"35","1650573503374","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","35","1650573503525","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"36","1650573503529","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","36","1650573503647","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"37","1650573503652","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","37","1650573503741","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"38","1650573503745","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","38","1650573504730","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","39","1650573504734","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"39","1650573504734","main.py","1.1.12 for 2019-2020 @t1"
"e","F","","39","1650573506010","main.py","1.1.12 for 2019-2020 @t1"
"k","F",,"40","1650573506011","main.py","1.1.12 for 2019-2020 @t1"
"e","I","","40","1650573506113","main.py","1.1.12 for 2019-2020 @t1"
"k","I",,"41","1650573506117","main.py","1.1.12 for 2019-2020 @t1"
"e","L","","41","1650573506297","main.py","1.1.12 for 2019-2020 @t1"
"k","L",,"42","1650573506300","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","42","1650573506393","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"43","1650573506396","main.py","1.1.12 for 2019-2020 @t1"
"e","NAME","","43","1650573506685","main.py","1.1.12 for 2019-2020 @t1"
"e","","FILENAME","39","1650573512917","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","22","1650573515009","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","30","1650573516765","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","30","1650573517890","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","22","1650573519385","main.py","1.1.12 for 2019-2020 @t1"
"e","","print()","33","1650573522360","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","33","1650573522365","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"34","1650573522366","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","34","1650573522543","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"35","1650573522548","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","35","1650573522693","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"36","1650573522699","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","36","1650573522820","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"37","1650573522824","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","37","1650573524368","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","38","1650573524371","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"38","1650573524372","main.py","1.1.12 for 2019-2020 @t1"
"e","F","","38","1650573524671","main.py","1.1.12 for 2019-2020 @t1"
"k","F",,"39","1650573524672","main.py","1.1.12 for 2019-2020 @t1"
"e","I","","39","1650573524938","main.py","1.1.12 for 2019-2020 @t1"
"k","I",,"40","1650573524943","main.py","1.1.12 for 2019-2020 @t1"
"e","L","","40","1650573525116","main.py","1.1.12 for 2019-2020 @t1"
"k","L",,"41","1650573525119","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","41","1650573525216","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"42","1650573525219","main.py","1.1.12 for 2019-2020 @t1"
"e","NAME","","42","1650573525622","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","46","1650573526370","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"47","1650573526370","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","47","1650573527295","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"48","1650573527296","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","48","1650573527430","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","48","1650573527434","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"49","1650573527434","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","49","1650573527774","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"50","1650573527774","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","47","1650573530256","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","47","1650573535308","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"48","1650573535309","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","52","1650573536216","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"53","1650573536216","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","53","1650573536374","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"54","1650573536374","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","54","1650573536532","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"55","1650573536536","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","55","1650573536796","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"56","1650573536797","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","56","1650573536952","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"57","1650573536952","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","57","1650573537344","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"58","1650573537345","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","60","1650573543427","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","59","1650573544618","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","63","1650573545341","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"64","1650573545341","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","64","1650573545476","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"65","1650573545481","main.py","1.1.12 for 2019-2020 @t1"
"e","w","","65","1650573545534","main.py","1.1.12 for 2019-2020 @t1"
"k","w",,"66","1650573545537","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","66","1650573545758","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"67","1650573545761","main.py","1.1.12 for 2019-2020 @t1"
"e","=","","67","1650573546039","main.py","1.1.12 for 2019-2020 @t1"
"k","=",,"68","1650573546039","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","68","1650573547300","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"69","1650573547301","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","69","1650573547453","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"70","1650573547453","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","70","1650573547678","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"71","1650573547679","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","71","1650573547981","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"72","1650573547985","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","72","1650573548112","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"73","1650573548116","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","73","1650573548262","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"74","1650573548266","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","74","1650573548459","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"75","1650573548462","main.py","1.1.12 for 2019-2020 @t1"
"e","lines","","75","1650573548894","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","67","1650573550861","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"68","1650573550862","main.py","1.1.12 for 2019-2020 @t1"
"e",""," as f:
    rows = f.readlines","52","1650573552690","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","52","1650573555033","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"53","1650573555034","main.py","1.1.12 for 2019-2020 @t1"
"e","",":","52","1650573556423","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","54","1650573577917","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","55","1650573578076","main.py","1.1.12 for 2019-2020 @t1"
"p","    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)",,"54","1650573578266","main.py","1.1.12 for 2019-2020 @t1"
"e","mazefile = open(FILENAME, ""r"")
for line in mazefile.read().splitlines():
    maze.append([])
    for c in line:
        maze[-1].append(c)","","54","1650573578270","main.py","1.1.12 for 2019-2020 @t1"
"e","","
open(FILENAME, 'r')","32","1650573584612","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","33","1650573586618","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"34","1650573586619","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","34","1650573586792","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"35","1650573586796","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","35","1650573586938","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"36","1650573586942","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","36","1650573587133","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"37","1650573587134","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","37","1650573587322","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"38","1650573587322","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","38","1650573587522","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"39","1650573587522","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","39","1650573587627","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"40","1650573587628","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","40","1650573587730","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"41","1650573587730","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","41","1650573588847","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","42","1650573588851","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"42","1650573588851","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","42","1650573589429","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"43","1650573589429","main.py","1.1.12 for 2019-2020 @t1"
"e","",":","42","1650573589929","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","43","1650573590617","main.py","1.1.12 for 2019-2020 @t1"
"k",":",,"44","1650573590617","main.py","1.1.12 for 2019-2020 @t1"
"e","`","","45","1650573593085","main.py","1.1.12 for 2019-2020 @t1"
"e","`","","184","1650573593085","main.py","1.1.12 for 2019-2020 @t1"
"k","`",,"46","1650573593086","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","45","1650573597298","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","81","1650573597301","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","127","1650573597304","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","151","1650573597307","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","182","1650573597310","main.py","1.1.12 for 2019-2020 @t1"
"e","","`","204","1650573603778","main.py","1.1.12 for 2019-2020 @t1"
"e","","`","49","1650573606032","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","42","1650573613817","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"43","1650573613818","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","43","1650573613976","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"44","1650573613977","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","44","1650573614233","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"45","1650573614233","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","45","1650573614503","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"46","1650573614505","main.py","1.1.12 for 2019-2020 @t1"
"e","
            ","","207","1650573617647","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","7","1650573622871","main.py","1.1.12 for 2019-2020 @t1"
"e","y","","8","1650573623524","main.py","1.1.12 for 2019-2020 @t1"
"k","y",,"9","1650573623525","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","9","1650573623812","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"10","1650573623815","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","12","1650573630524","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","11","1650573630901","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"12","1650573630902","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","12","1650573631038","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"13","1650573631042","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","13","1650573631202","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"14","1650573631207","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","14","1650573631360","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"15","1650573631364","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","15","1650573631436","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"16","1650573631440","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","16","1650573631665","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"17","1650573631670","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","17","1650573631751","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"18","1650573631751","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","18","1650573631885","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"19","1650573631886","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","19","1650573631961","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"20","1650573631965","main.py","1.1.12 for 2019-2020 @t1"
"e","","def open(maze):","44","1650573642990","main.py","1.1.12 for 2019-2020 @t1"
"e","def open(maze):","","44","1650573644501","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","230","1650573648950","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","228","1650573648954","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","219","1650573650258","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"220","1650573650258","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","220","1650573650710","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"221","1650573650715","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","221","1650573651060","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"222","1650573651065","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","222","1650573651172","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"223","1650573651176","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","223","1650573651243","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"224","1650573651246","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","233","1650573652245","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"225","1650573652246","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","225","1650573652441","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"226","1650573652441","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","226","1650573652560","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"227","1650573652566","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","227","1650573652781","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"228","1650573652787","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","228","1650573653224","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"229","1650573653224","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","224","1650573654524","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","224","1650573654970","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"225","1650573654971","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","229","1650573656794","main.py","1.1.12 for 2019-2020 @t1"
"k",")",,"230","1650573656795","main.py","1.1.12 for 2019-2020 @t1"
"e","","print(maze)   ","219","1650573661782","main.py","1.1.12 for 2019-2020 @t1"
"e","            
","","219","1650573663251","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","230","1650573663631","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","227","1650573663634","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","226","1650573664053","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","223","1650573664057","main.py","1.1.12 for 2019-2020 @t1"
"p","print(maze)   ",,"223","1650573664822","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","219","1650573664826","main.py","1.1.12 for 2019-2020 @t1"
"e","    print(maze)   ","","219","1650573664829","main.py","1.1.12 for 2019-2020 @t1"
"e","","   
      ","234","1650573664837","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","234","1650573664838","main.py","1.1.12 for 2019-2020 @t1"
"e","","def open(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    print(maze)
","44","1650573675438","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","45","1650573675852","main.py","1.1.12 for 2019-2020 @t1"
"p","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])

class Maze:
    START = ""S""
    END   = ""E""
    WALL  = ""#""
    PATH  = "" ""
    OPEN  = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir("">"",  0,  1)
    DOWN  = Dir(""v"",  1,  0)
    LEFT  = Dir(""<"",  0, -1)
    UP    = Dir(""^"", -1,  0)
    DIRS  = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze  = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y,line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START: # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False

def main():
    maze = Maze.load_maze(""somemaze.txt"")

    print(""Maze loaded:"")
    print(maze)

    try:
        sy, sx = maze.find_start()
        print(""solving..."")
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")

if __name__==""__main__"":
    main()",,"305","1650573744991","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","Lockout","69139","1650573745156","main.py","1.1.12 for 2019-2020 @t1"
"e","","import sys
import os

FILENAME = ""maze.txt""

class MazeCrawler:
    def __init__(self):
        self.maze = []

    def load_maze(self):
        rows = []
        ","0","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])

class Maze:
    START = ""S""
    END   = ""E""
    WALL  = ""#""
    PATH  = "" ""
    OPEN  = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir("">"",  0,  1)
    DOWN  = Dir(""v"",  1,  0)
    LEFT  = Dir(""<"",  0, -1)","","0","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","UP","","339","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","","with open(FILENAME, 'r') as f:
            rows = f.readlines()

        for i in range(len(rows)):
            self.maze.append([])

            for j in range(len(rows[i]) - 1):
          ","345","1650573745001","main.py","1.1.12 for 2019-2020 @t1"
"e","= Dir(""^"", -1,  0)
    DIRS  = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze  = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
","","345","1650573745002","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","653","1650573745003","main.py","1.1.12 for 2019-2020 @t1"
"e","","[i].append(rows[i][j])

        retur","664","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e"," = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line i","","664","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","756","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","get","767","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","find","","767","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","_coor","777","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","","i in range(len","797","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y,line in enumerate","","797","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","",")","827","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","for j in range(len(self.maze[i])):
                if self.maze[i][j] == 'S':
                    return i, j
        return -1, -1","841","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")","","841","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","_maze","1051","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","coor):
        x, y = coor
","1058","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","y, x):","","1058","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y","1086","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y][x","","1086","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","'#' or self.maze[x][y] == 'X':
            return False

        if self.maze[x][y] == 'E':","1095","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze.END:
            # base case - endpoint has been found","","1095","1650573745001","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","1179","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","if self.maze[x][y] != 'S':
            self.maze[x][y] = 'X'

        if self.solve_maze((x + 1, y)):
            if self.maze[x][y] != 'S':","1187","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx","","1187","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","if ","","1352","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y] = '.'

        elif self.solve_maze((x - 1, y)):
","1365","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","ny][nx] in Maze.OPEN:  # can I go this way?
      ","","1365","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","1427","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y","1442","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y][x","","1442","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","'S':
","1451","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze.START: # don't overwrite Maze.START
     ","","1451","1650573745001","main.py","1.1.12 for 2019-2020 @t1"
"e","   ","","1513","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y] = '.'

","1526","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y][x] = dir.char  # mark direction chosen
       ","","1526","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","el","1583","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","     ","","1583","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","_maze((x, y + 1)):
            if self.maze[x][y] != 'S':
","1601","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","(ny, nx):          # recurse...
                        return True  ","","1601","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","#","","1685","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","elf.maze[x][y] = '.'

        elif self.solve_maze((x, y - 1)):","1688","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","olution found!

            # no solution found from this location","","1688","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y","1780","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y][x","","1780","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","'S':","1789","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze.START:       # don't overwrite Maze.START","","1789","1650573745001","main.py","1.1.12 for 2019-2020 @t1"
"e","","x][y] = '.'
        else:
            return False

        return True

    def show_solution(self):
        for i in range(len(self.maze)):
            r = ''
            for j in range(len(self.maze[i])):
                if self.maze[i][j] == 'X':
                    r += ' '
        ","1862","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","y][x] = Maze.PATH         # clear failed search from map
            return False

def main():
    maze = Maze.load_maze(""somemaze.txt"")

    print(""Maze loaded:"")
    print(maze)

    try:
        sy, sx = maze.find_start()
        print(""solving..."")
        if maze.solve(sy, sx):
            print(maze)
","","1862","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","        r += self.maze[i][j]","2196","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","print(""    no solution found"")
    except ValueError:","","2196","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2254","1650573744998","main.py","1.1.12 for 2019-2020 @t1"
"e","","r)
","2264","1650573744999","main.py","1.1.12 for 2019-2020 @t1"
"e","""No start point found."")

if __name__==""__main__"":
    main()","","2264","1650573745000","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","-1:-1:-1","69139","1650573746421","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","120","1650573750263","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","119","1650573750518","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","134","1650573752432","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","133","1650573752613","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","133","1650573753599","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"134","1650573753600","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","149","1650573754366","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","165","1650573755501","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"166","1650573755502","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","165","1650573755830","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","164","1650573756009","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","281","1650573758003","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","338","1650573759293","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","309","1650573760469","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","336","1650573761476","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","335","1650573761907","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","363","1650573763470","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","83","1650573766777","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","1935","1650573778354","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","2281","1650573783475","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2293","1650573790419","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2294","1650573790421","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2296","1650573791072","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2297","1650573791074","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","2319","1650573791946","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","1452","1650573800456","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1452","1650573803326","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"1453","1650573803327","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","1452","1650573805014","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"1454","1650573805015","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","547","1650573823844","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","788","1650573829999","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"789","1650573830000","main.py","1.1.12 for 2019-2020 @t1"
"e","","#","138","1650573887167","main.py","1.1.12 for 2019-2020 @t1"
"e","X","","138","1650573888175","main.py","1.1.12 for 2019-2020 @t1"
"k","X",,"139","1650573888176","main.py","1.1.12 for 2019-2020 @t1"
"e","","somemaze","1976","1650573901539","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","1976","1650573907581","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"1977","1650573907585","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","1977","1650573907713","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"1978","1650573907716","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","1978","1650573908033","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"1979","1650573908037","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","1979","1650573908238","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"1980","1650573908244","main.py","1.1.12 for 2019-2020 @t1"
"e","",">","261","1650573943807","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","261","1650573944278","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"262","1650573944280","main.py","1.1.12 for 2019-2020 @t1"
"e","","v","289","1650573946435","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","289","1650573946597","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"290","1650573946605","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","318","1650573947569","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"319","1650573947572","main.py","1.1.12 for 2019-2020 @t1"
"e","",".","318","1650573947921","main.py","1.1.12 for 2019-2020 @t1"
"e","","<","317","1650573948098","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","317","1650573948214","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"318","1650573948217","main.py","1.1.12 for 2019-2020 @t1"
"e","","^","343","1650573949122","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","343","1650573949220","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"344","1650573949223","main.py","1.1.12 for 2019-2020 @t1"
"e","","    print(""Maze loaded:"")
    print(maze)

","1988","1650573992238","main.py","1.1.12 for 2019-2020 @t1"
"e","","    print(""solving..."")
    ","2036","1650574000532","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","109","1650574034233","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","122","1650574035223","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","0","1650574154024","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","0","1650574159579","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","109","1650574186693","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"110","1650574186697","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","123","1650574187602","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"124","1650574187605","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","123","1650574189888","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","123","1650574190787","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"124","1650574190789","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","123","1650574190997","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"125","1650574191000","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","109","1650574193431","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","109","1650574193657","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"110","1650574193660","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","109","1650574193860","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"111","1650574193863","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","109","1650574209720","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","109","1650574209889","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","122","1650574210705","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","122","1650574210871","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","122","1650574212327","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"123","1650574212332","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","109","1650574214207","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"110","1650574214210","main.py","1.1.12 for 2019-2020 @t1"
"e","","if __name__ == ""__main__"":
","2208","1650574287588","main.py","1.1.12 for 2019-2020 @t1"
"e","if __name__ == ""__main__"":
","","2208","1650574310681","main.py","1.1.12 for 2019-2020 @t1"
"e","","if __name__ == ""__main__"":
","2208","1650574334050","main.py","1.1.12 for 2019-2020 @t1"
"e","\","","2207","1650574334062","main.py","1.1.12 for 2019-2020 @t1"
"k","\",,"2208","1650574334064","main.py","1.1.12 for 2019-2020 @t1"
"e","","\","2207","1650574334915","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2211","1650574337358","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2208","1650574337370","main.py","1.1.12 for 2019-2020 @t1"
"e","","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False


def main():
    maze = Maze.load_maze(""maze.txt"")

    try:
        sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")


main()
    ","0","1650574391544","main.py","1.1.12 for 2019-2020 @t1"
"p","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False


def main():
    maze = Maze.load_maze(""maze.txt"")

    try:
        sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")


main()
    ",,"0","1650574392273","main.py","1.1.12 for 2019-2020 @t1"
"e","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False


def main():
    maze = Maze.load_maze(""maze.txt"")

    try:
        sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")


main()
","","0","1650574392278","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","264","1650574392308","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","267","1650574392312","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","290","1650574392316","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","293","1650574392321","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","316","1650574392326","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","345","1650574392330","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","1595","1650574392335","main.py","1.1.12 for 2019-2020 @t1"
"e","","               ","1647","1650574392340","main.py","1.1.12 for 2019-2020 @t1"
"e","","     ","1762","1650574392344","main.py","1.1.12 for 2019-2020 @t1"
"e","","       ","1838","1650574392349","main.py","1.1.12 for 2019-2020 @t1"
"e","       ","","1838","1650574395181","main.py","1.1.12 for 2019-2020 @t1"
"e","     ","","1762","1650574395185","main.py","1.1.12 for 2019-2020 @t1"
"e","               ","","1647","1650574395189","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","1595","1650574395192","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","345","1650574395196","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","316","1650574395199","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","293","1650574395202","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","290","1650574395205","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","267","1650574395208","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","264","1650574395211","main.py","1.1.12 for 2019-2020 @t1"
"e","","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False


def main():
    maze = Maze.load_maze(""maze.txt"")

    try:
        sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")


main()
","0","1650574395214","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True




# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"0","1650574399668","main.py","1.1.12 for 2019-2020 @t1"
"e","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True




# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."",  0,  1)
    DOWN = Dir(""."",  1,  0)
    LEFT = Dir(""."",  0, -1)
    UP = Dir(""."", -1,  0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line

def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
","","0","1650574399672","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","80","1650574441991","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","79","1650574442220","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","78","1650574442575","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","122","1650574444217","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","123","1650574444398","main.py","1.1.12 for 2019-2020 @t1"
"e","i","","122","1650574445640","main.py","1.1.12 for 2019-2020 @t1"
"k","i",,"123","1650574445641","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","123","1650574445815","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"124","1650574445819","main.py","1.1.12 for 2019-2020 @t1"
"e","p","","124","1650574445963","main.py","1.1.12 for 2019-2020 @t1"
"k","p",,"125","1650574445967","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","125","1650574446130","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"126","1650574446134","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","126","1650574446195","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"127","1650574446199","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","127","1650574446364","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"128","1650574446368","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","128","1650574446490","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"129","1650574446491","main.py","1.1.12 for 2019-2020 @t1"
"p","from collections import namedtuple",,"122","1650574461760","main.py","1.1.12 for 2019-2020 @t1"
"e","","import","122","1650574461767","main.py","1.1.12 for 2019-2020 @t1"
"e","from collections import namedtuple","","122","1650574461768","main.py","1.1.12 for 2019-2020 @t1"
"e","","from collections import namedtuple ","122","1650574470033","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","24","1650574471440","main.py","1.1.12 for 2019-2020 @t1"
"p","from collections import namedtuple ",,"23","1650574471631","main.py","1.1.12 for 2019-2020 @t1"
"e","from collections import namedtuple ","","23","1650574471634","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","159","1650574473525","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","158","1650574473905","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","2188","1650574541791","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","231","1650574557215","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","231","1650574557852","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"232","1650574557852","main.py","1.1.12 for 2019-2020 @t1"
"e","","1","231","1650574559620","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","231","1650574559830","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","230","1650574559833","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","230","1650574560124","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"231","1650574560125","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","231","1650574567066","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"232","1650574567067","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","232","1650574567818","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"233","1650574567819","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","233","1650574567936","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"234","1650574567937","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","233","1650574568655","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","232","1650574568878","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","231","1650574569051","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","244","1650574569889","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","243","1650574570063","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","242","1650574570609","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","242","1650574570912","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"243","1650574570913","main.py","1.1.12 for 2019-2020 @t1"
"e","","solve","2665","1650574681020","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","2665","1650574681023","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"2666","1650574681023","main.py","1.1.12 for 2019-2020 @t1"
"e","A","","2666","1650574681179","main.py","1.1.12 for 2019-2020 @t1"
"k","A",,"2667","1650574681183","main.py","1.1.12 for 2019-2020 @t1"
"e","Z","","2667","1650574681523","main.py","1.1.12 for 2019-2020 @t1"
"k","Z",,"2668","1650574681526","main.py","1.1.12 for 2019-2020 @t1"
"e","","AZ","2666","1650574682718","main.py","1.1.12 for 2019-2020 @t1"
"e","aze","","2666","1650574682719","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2675","1650574689464","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","2674","1650574689640","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","2673","1650574689808","main.py","1.1.12 for 2019-2020 @t1"
"e","","z","2672","1650574689970","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","2671","1650574690142","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2670","1650574690544","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","2670","1650574717867","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2671","1650574717871","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2672","1650574717874","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2673","1650574717876","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","2674","1650574717879","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2675","1650574717882","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","751","1650574725443","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"752","1650574725444","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","752","1650574725624","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"753","1650574725624","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","753","1650574725834","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"754","1650574725834","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","754","1650574726213","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"755","1650574726214","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","755","1650574726362","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"756","1650574726362","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","756","1650574726448","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"757","1650574726448","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","757","1650574726730","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"758","1650574726732","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","758","1650574726962","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"759","1650574726963","main.py","1.1.12 for 2019-2020 @t1"
"e","v","","759","1650574727280","main.py","1.1.12 for 2019-2020 @t1"
"k","v",,"760","1650574727281","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","760","1650574727487","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"761","1650574727488","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","761","1650574727582","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"762","1650574727583","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","762","1650574727706","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"763","1650574727707","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","762","1650574727965","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","761","1650574728128","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","760","1650574728286","main.py","1.1.12 for 2019-2020 @t1"
"e","","v","759","1650574728447","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","759","1650574729140","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"760","1650574729141","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","760","1650574729404","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"761","1650574729404","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","761","1650574729509","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"762","1650574729510","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","762","1650574729627","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"763","1650574729627","main.py","1.1.12 for 2019-2020 @t1"
"e","
        ","","790","1650574731234","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","799","1650574731435","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"800","1650574731435","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","800","1650574731618","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"801","1650574731624","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","801","1650574731809","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"802","1650574731815","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","802","1650574731959","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"803","1650574731965","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","803","1650574732084","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"804","1650574732085","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","804","1650574732258","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"805","1650574732264","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","805","1650574732450","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"806","1650574732454","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","806","1650574732590","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"807","1650574732594","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","807","1650574732687","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"808","1650574732689","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","808","1650574732906","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"809","1650574732909","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","809","1650574733690","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"810","1650574733690","main.py","1.1.12 for 2019-2020 @t1"
"e","=","","810","1650574733958","main.py","1.1.12 for 2019-2020 @t1"
"k","=",,"811","1650574733959","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","811","1650574734098","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"812","1650574734098","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","812","1650574734713","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"813","1650574734714","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","813","1650574735057","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"814","1650574735062","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","813","1650574735430","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","813","1650574735503","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"814","1650574735509","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","814","1650574735635","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"815","1650574735640","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","815","1650574735746","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"816","1650574735750","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","816","1650574735948","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"817","1650574735952","main.py","1.1.12 for 2019-2020 @t1"
"e","
        ","","817","1650574736382","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","826","1650574736828","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"827","1650574736829","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","827","1650574737029","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"828","1650574737034","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","828","1650574737169","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"829","1650574737173","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","829","1650574737388","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"830","1650574737393","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","830","1650574737625","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"831","1650574737625","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","831","1650574738468","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"832","1650574738473","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","832","1650574738581","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"833","1650574738586","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","833","1650574738697","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"834","1650574738698","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","834","1650574739290","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"835","1650574739291","main.py","1.1.12 for 2019-2020 @t1"
"e","=","","835","1650574739460","main.py","1.1.12 for 2019-2020 @t1"
"k","=",,"836","1650574739461","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","836","1650574739546","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"837","1650574739546","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","837","1650574739693","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"838","1650574739694","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","838","1650574739820","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"839","1650574739825","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","839","1650574739941","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"840","1650574739945","main.py","1.1.12 for 2019-2020 @t1"
"e","\","","231","1650574758401","main.py","1.1.12 for 2019-2020 @t1"
"k","\",,"232","1650574758402","main.py","1.1.12 for 2019-2020 @t1"
"e","","\","231","1650574758910","main.py","1.1.12 for 2019-2020 @t1"
"e","","1","230","1650574759081","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","230","1650574759695","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"231","1650574759695","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","231","1650574759919","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"232","1650574759924","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","232","1650574760044","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"233","1650574760048","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","233","1650574760423","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"234","1650574760428","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","234","1650574760656","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"235","1650574760657","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","235","1650574764058","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"236","1650574764062","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","236","1650574764359","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"237","1650574764360","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","237","1650574764615","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"238","1650574764618","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","238","1650574764736","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"239","1650574764739","main.py","1.1.12 for 2019-2020 @t1"
"e","t","","239","1650574764965","main.py","1.1.12 for 2019-2020 @t1"
"k","t",,"240","1650574764969","main.py","1.1.12 for 2019-2020 @t1"
"e","","
        self.start = start
        self.end = end","799","1650574771894","main.py","1.1.12 for 2019-2020 @t1"
"e","","start, end","762","1650574774871","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","761","1650574775209","main.py","1.1.12 for 2019-2020 @t1"
"e","",",","760","1650574775430","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","218","1650574779041","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","218","1650574779049","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","222","1650574779908","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"223","1650574779909","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","223","1650574780097","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"224","1650574780101","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","224","1650574780165","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"225","1650574780171","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","225","1650574780358","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"226","1650574780358","main.py","1.1.12 for 2019-2020 @t1"
"e","_","","226","1650574781055","main.py","1.1.12 for 2019-2020 @t1"
"k","_",,"227","1650574781056","main.py","1.1.12 for 2019-2020 @t1"
"e","_","","227","1650574781201","main.py","1.1.12 for 2019-2020 @t1"
"k","_",,"228","1650574781213","main.py","1.1.12 for 2019-2020 @t1"
"e","int__(self)","","228","1650574783151","main.py","1.1.12 for 2019-2020 @t1"
"e",":","","239","1650574783160","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","241","1650574784167","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","245","1650574784174","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","250","1650574784403","main.py","1.1.12 for 2019-2020 @t1"
"p","start, end",,"249","1650574785707","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","241","1650574785713","main.py","1.1.12 for 2019-2020 @t1"
"e","        start, end","","241","1650574785716","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","258","1650574787247","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","258","1650574788261","main.py","1.1.12 for 2019-2020 @t1"
"e","","        start, end","241","1650574788687","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","241","1650574788691","main.py","1.1.12 for 2019-2020 @t1"
"p","start, end",,"238","1650574790004","main.py","1.1.12 for 2019-2020 @t1"
"e","start, end","","238","1650574790014","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","238","1650574791160","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"239","1650574791161","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","239","1650574791282","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"240","1650574791282","main.py","1.1.12 for 2019-2020 @t1"
"e","\","","252","1650574792873","main.py","1.1.12 for 2019-2020 @t1"
"k","\",,"253","1650574792874","main.py","1.1.12 for 2019-2020 @t1"
"e","","\","252","1650574794270","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","253","1650574794489","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","257","1650574794496","main.py","1.1.12 for 2019-2020 @t1"
"p","
        self.start = start
        self.end = end",,"261","1650574796939","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","253","1650574796943","main.py","1.1.12 for 2019-2020 @t1"
"e","        self.start = start
        self.end = end
","","254","1650574796947","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","253","1650574798021","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","319","1650574803801","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","316","1650574803805","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","315","1650574804030","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","312","1650574804033","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","312","1650574804393","main.py","1.1.12 for 2019-2020 @t1"
"e","",".","328","1650574807595","main.py","1.1.12 for 2019-2020 @t1"
"e","","f","327","1650574807805","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","326","1650574807997","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","325","1650574808206","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","324","1650574808439","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","324","1650574810167","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","325","1650574810170","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","326","1650574810173","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","327","1650574810176","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","328","1650574810179","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","312","1650574814791","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","339","1650574814794","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","355","1650574814797","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","374","1650574814800","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","393","1650574814827","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","484","1650574814830","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","489","1650574814833","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","522","1650574814835","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","554","1650574814838","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","586","1650574814841","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","616","1650574814843","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","353","1650574824790","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","353","1650574825331","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"354","1650574825332","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","354","1650574825519","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"355","1650574825524","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","355","1650574825629","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"356","1650574825634","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","356","1650574825773","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"357","1650574825779","main.py","1.1.12 for 2019-2020 @t1"
"e",".","","357","1650574825908","main.py","1.1.12 for 2019-2020 @t1"
"k",".",,"358","1650574825908","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","358","1650574826521","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"359","1650574826526","main.py","1.1.12 for 2019-2020 @t1"
"e","n","","359","1650574826671","main.py","1.1.12 for 2019-2020 @t1"
"k","n",,"360","1650574826675","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","360","1650574826769","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"361","1650574826775","main.py","1.1.12 for 2019-2020 @t1"
"e","",".","332","1650574837584","main.py","1.1.12 for 2019-2020 @t1"
"e","","f","331","1650574837758","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","330","1650574837928","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","329","1650574838090","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","328","1650574838273","main.py","1.1.12 for 2019-2020 @t1"
"e","",".","352","1650574839576","main.py","1.1.12 for 2019-2020 @t1"
"e","","f","351","1650574839782","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","350","1650574839977","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","350","1650574840145","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","348","1650574840335","main.py","1.1.12 for 2019-2020 @t1"
"e","","1","2820","1650574892082","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","2820","1650574892495","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"2821","1650574892495","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","2823","1650574893530","main.py","1.1.12 for 2019-2020 @t1"
"e","W","","2823","1650574893733","main.py","1.1.12 for 2019-2020 @t1"
"k","W",,"2824","1650574893733","main.py","1.1.12 for 2019-2020 @t1"
"e","","W","2823","1650574894669","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","2823","1650574895145","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"2824","1650574895145","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","2824","1650574895893","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","2825","1650574895899","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"2825","1650574895900","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","2823","1650574896544","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"2824","1650574896545","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","2820","1650574899136","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"2821","1650574899137","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","2822","1650574899611","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"2823","1650574899612","main.py","1.1.12 for 2019-2020 @t1"
"e","\","","2829","1650574900768","main.py","1.1.12 for 2019-2020 @t1"
"k","\",,"2830","1650574900769","main.py","1.1.12 for 2019-2020 @t1"
"e","","\","2829","1650574901140","main.py","1.1.12 for 2019-2020 @t1"
"e","","'","2828","1650574901311","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys
from collections import namedtuple 

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end
        
        START = start
        END = end
        WALL = ""X""
        PATH = "" ""
        OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)
    
        RIGHT = Dir(""."",  0,  1)
        DOWN = Dir(""."",  1,  0)
        LEFT = Dir(""."",  0, -1)
        UP = Dir(""."", -1,  0)
        DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not Maze(maze, 'S', 'E'):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"2830","1650574916236","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","303","1650574916241","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","473","1650574916241","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","57","1650574916258","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","497","1650574916279","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","500","1650574916283","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","527","1650574916289","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","530","1650574916294","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","557","1650574916300","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","590","1650574916305","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","1844","1650574916311","main.py","1.1.12 for 2019-2020 @t1"
"e","","               ","1896","1650574916317","main.py","1.1.12 for 2019-2020 @t1"
"e","","     ","2011","1650574916322","main.py","1.1.12 for 2019-2020 @t1"
"e","","       ","2087","1650574916328","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","2143","1650574916333","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys
from collections import namedtuple 

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end
        
        START = start
        END = end
        WALL = ""X""
        PATH = "" ""
        OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)
    
        RIGHT = Dir(""."",  0,  1)
        DOWN = Dir(""."",  1,  0)
        LEFT = Dir(""."",  0, -1)
        UP = Dir(""."", -1,  0)
        DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not Maze(maze, 'S', 'E'):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"2864","1650574920272","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","57","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","498","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","502","1650574920278","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","530","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","534","1650574920278","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","562","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","596","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","1851","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e","               ","","1911","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e","     ","","2041","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e","       ","","2122","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e","","

","2185","1650574920277","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","57","1650574920293","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","497","1650574920310","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","500","1650574920315","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","527","1650574920320","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","530","1650574920325","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","557","1650574920330","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","590","1650574920335","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","1844","1650574920339","main.py","1.1.12 for 2019-2020 @t1"
"e","","               ","1896","1650574920344","main.py","1.1.12 for 2019-2020 @t1"
"e","","     ","2011","1650574920349","main.py","1.1.12 for 2019-2020 @t1"
"e","","       ","2087","1650574920353","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","2143","1650574920358","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys
from collections import namedtuple 

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end
        
        START = start
        END = end
        WALL = ""X""
        PATH = "" ""
        OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)
    
        RIGHT = Dir(""."",  0,  1)
        DOWN = Dir(""."",  1,  0)
        LEFT = Dir(""."",  0, -1)
        UP = Dir(""."", -1,  0)
        DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):          # recurse...
                        return True                 # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:       # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH         # clear failed search from map
            return False
# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not Maze(maze, 'S', 'E'):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"2864","1650574923669","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","57","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","498","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","502","1650574923677","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","530","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","534","1650574923677","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","562","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","596","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","1851","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e","               ","","1911","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e","     ","","2041","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e","       ","","2122","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e","","

","2185","1650574923676","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","57","1650574923693","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","497","1650574923711","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","500","1650574923716","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","527","1650574923722","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","530","1650574923727","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","557","1650574923731","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","590","1650574923736","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","1844","1650574923741","main.py","1.1.12 for 2019-2020 @t1"
"e","","               ","1896","1650574923746","main.py","1.1.12 for 2019-2020 @t1"
"e","","     ","2011","1650574923750","main.py","1.1.12 for 2019-2020 @t1"
"e","","       ","2087","1650574923755","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","2143","1650574923760","main.py","1.1.12 for 2019-2020 @t1"
"p","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
    END = ""E""
    WALL = ""X""
    PATH = "" ""
    OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

    RIGHT = Dir(""."", 0, 1)
    DOWN = Dir(""."", 1, 0)
    LEFT = Dir(""."", 0, -1)
    UP = Dir(""."", -1, 0)
    DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):  # recurse...
                        return True  # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH  # clear failed search from map
            return False


def main():
    maze = Maze.load_maze(""maze.txt"")

    try:
        sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")


main()
",,"2864","1650574929615","main.py","1.1.12 for 2019-2020 @t1"
"e","","import time
import sys
","0","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","","SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
  ","36","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
","","36","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","116","1650574929621","main.py","1.1.12 for 2019-2020 @t1"
"e","","end
   ","122","1650574929622","main.py","1.1.12 for 2019-2020 @t1"
"e","""E""
","","122","1650574929623","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","130","1650574929624","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","145","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","145","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","160","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","160","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","248","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","248","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","275","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","275","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","301","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","301","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","328","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","328","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","349","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","","# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line","1896","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","def main():
    maze = Maze.load_maze(""maze.txt"")

    try","","1896","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","    maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not Maze(maze, 'S', 'E'):
        print(""no solution is possible."")
    else:
        printMaze(maze","1964","1650574929619","main.py","1.1.12 for 2019-2020 @t1"
"e","sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found.""","","1964","1650574929620","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","110","1650574940929","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","109","1650574941133","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","108","1650574941452","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","108","1650574942215","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"109","1650574942215","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","122","1650574942913","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","121","1650574943098","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","120","1650574943435","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","120","1650574944580","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"121","1650574944581","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","108","1650574946558","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","108","1650574946703","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"109","1650574946704","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","109","1650574954344","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"110","1650574954345","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","110","1650574954511","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"111","1650574954511","main.py","1.1.12 for 2019-2020 @t1"
"e","","0","122","1650574955474","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","122","1650574958523","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"123","1650574958524","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","122","1650574968016","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"123","1650574968016","main.py","1.1.12 for 2019-2020 @t1"
"e","'","","124","1650574968826","main.py","1.1.12 for 2019-2020 @t1"
"k","'",,"125","1650574968827","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","110","1650574970622","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"111","1650574970622","main.py","1.1.12 for 2019-2020 @t1"
"e","","1, 0","108","1650574979328","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","108","1650574980961","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","109","1650574980965","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"109","1650574980965","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","109","1650574981263","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"110","1650574981263","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","110","1650574981852","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"111","1650574981853","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","111","1650574982182","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"112","1650574982182","main.py","1.1.12 for 2019-2020 @t1"
"e","","(1,0)","108","1650574989339","main.py","1.1.12 for 2019-2020 @t1"
"e","0","","108","1650575001456","main.py","1.1.12 for 2019-2020 @t1"
"k","0",,"109","1650575001457","main.py","1.1.12 for 2019-2020 @t1"
"e",",","","109","1650575001672","main.py","1.1.12 for 2019-2020 @t1"
"k",",",,"110","1650575001673","main.py","1.1.12 for 2019-2020 @t1"
"e","1","","110","1650575001912","main.py","1.1.12 for 2019-2020 @t1"
"k","1",,"111","1650575001912","main.py","1.1.12 for 2019-2020 @t1"
"e",")","","111","1650575002837","main.py","1.1.12 for 2019-2020 @t1"
"k",")",,"112","1650575002838","main.py","1.1.12 for 2019-2020 @t1"
"e","(","","108","1650575004353","main.py","1.1.12 for 2019-2020 @t1"
"k","(",,"109","1650575004353","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","111","1650575009661","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"112","1650575009661","main.py","1.1.12 for 2019-2020 @t1"
"e","","(0, 1)","108","1650575012267","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","108","1650575015255","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"109","1650575015256","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","109","1650575015569","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"110","1650575015574","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","110","1650575015855","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"111","1650575015870","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","111","1650575016099","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"112","1650575016100","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2080","1650575059235","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","111","1650575074059","main.py","1.1.12 for 2019-2020 @t1"
"e","","z","110","1650575074252","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","109","1650575074425","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","108","1650575074613","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","108","1650575075391","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","109","1650575075400","main.py","1.1.12 for 2019-2020 @t1"
"k","""",,"109","1650575075401","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","109","1650575075825","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"110","1650575075826","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","123","1650575077303","main.py","1.1.12 for 2019-2020 @t1"
"e","","'","123","1650575077745","main.py","1.1.12 for 2019-2020 @t1"
"e","","'","122","1650575077748","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","122","1650575078297","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","123","1650575078300","main.py","1.1.12 for 2019-2020 @t1"
"k","""",,"123","1650575078300","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","123","1650575079146","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"124","1650575079147","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
        END = end
        WALL = ""X""
        PATH = "" ""
        OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

        RIGHT = Dir(""."", 0, 1)
        DOWN = Dir(""."", 1, 0)
        LEFT = Dir(""."", 0, -1)
        UP = Dir(""."", -1, 0)
        DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):  # recurse...
                        return True  # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH  # clear failed search from map
            return False


# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"82","1650575206665","main.py","1.1.12 for 2019-2020 @t1"
"e","","from collections import namedtupl","0","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this lin","","0","1650575206671","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","122","1650575206672","main.py","1.1.12 for 2019-2020 @t1"
"e","","START = ""S""
","186","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
  ","","186","1650575206671","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","296","1650575206672","main.py","1.1.12 for 2019-2020 @t1"
"e","","""E""
","304","1650575206673","main.py","1.1.12 for 2019-2020 @t1"
"e","end
    ","","304","1650575206674","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","327","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","346","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","438","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","469","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","499","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","530","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","559","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","","def main():
    maze = Maze.load_maze(""maze.txt"")

    try","2110","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line","","2110","1650575206671","main.py","1.1.12 for 2019-2020 @t1"
"e","","sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""no solution found"")
    except ValueError:
        print(""No start point found.""","2398","1650575206670","main.py","1.1.12 for 2019-2020 @t1"
"e","    maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze","","2398","1650575206671","main.py","1.1.12 for 2019-2020 @t1"
"e","","import time
import sys

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
  ","0","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","from collections import namedtuple

Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
","","0","1650575217982","main.py","1.1.12 for 2019-2020 @t1"
"e","","  ","116","1650575217983","main.py","1.1.12 for 2019-2020 @t1"
"e","","end
    ","122","1650575217984","main.py","1.1.12 for 2019-2020 @t1"
"e","""E""
","","122","1650575217985","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","141","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","156","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","244","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","271","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","297","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","324","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","349","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","","# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([]","1896","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","def main():
    maze = Maze.load_maze(""maze.txt""","","1896","1650575217982","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","1946","1650575217983","main.py","1.1.12 for 2019-2020 @t1"
"e","","    for c in line","1951","1650575217984","main.py","1.1.12 for 2019-2020 @t1"
"e","try","","1951","1650575217985","main.py","1.1.12 for 2019-2020 @t1"
"e","","    maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze","1964","1650575217981","main.py","1.1.12 for 2019-2020 @t1"
"e","sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""no solution found"")
    except ValueError:
        print(""No start point found.""","","1964","1650575217982","main.py","1.1.12 for 2019-2020 @t1"
"p","import time
import sys
from collections import namedtuple

SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
        END = end
        WALL = ""X""
        PATH = "" ""
        OPEN = {PATH, END}  # map locations you can move to (not WALL or already explored)

        RIGHT = Dir(""."", 0, 1)
        DOWN = Dir(""."", 1, 0)
        LEFT = Dir(""."", 0, -1)
        UP = Dir(""."", -1, 0)
        DIRS = [RIGHT, DOWN, LEFT, UP]

    @classmethod
    def load_maze(cls, fname):
        with open(fname) as inf:
            lines = (line.rstrip(""\r\n"") for line in inf)
            maze = [list(line) for line in lines]
        return cls(maze)

    def __init__(self, maze):
        self.maze = maze

    def __str__(self):
        return ""\n"".join(''.join(line) for line in self.maze)

    def find_start(self):
        for y, line in enumerate(self.maze):
            try:
                x = line.index(""S"")
                return y, x
            except ValueError:
                pass

        # not found!
        raise ValueError(""Start location not found"")

    def solve(self, y, x):
        if self.maze[y][x] == Maze.END:
            # base case - endpoint has been found
            return True
        else:
            # search recursively in each direction from here
            for dir in Maze.DIRS:
                ny, nx = y + dir.dy, x + dir.dx
                if self.maze[ny][nx] in Maze.OPEN:  # can I go this way?
                    if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                        self.maze[y][x] = dir.char  # mark direction chosen
                    if self.solve(ny, nx):  # recurse...
                        return True  # solution found!

            # no solution found from this location
            if self.maze[y][x] != Maze.START:  # don't overwrite Maze.START
                self.maze[y][x] = Maze.PATH  # clear failed search from map
            return False


# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line:
            maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)


main()
",,"155","1650575234971","main.py","1.1.12 for 2019-2020 @t1"
"e","import time
import sys
","","0","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","","Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    START = ""S""
","59","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","SLEEPTIME = 0.1
FILENAME = ""maze.txt""
VERBOSE = True

# TODO: write all your code below this line
Dir = namedtuple(""Dir"", [""char"", ""dy"", ""dx""])


class Maze:
    def __int__(self, start, end):
        self.start = start
        self.end = end

        START = start
  ","","59","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","331","1650575234981","main.py","1.1.12 for 2019-2020 @t1"
"e","","""E""
","339","1650575234982","main.py","1.1.12 for 2019-2020 @t1"
"e","end
   ","","339","1650575234983","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","350","1650575234984","main.py","1.1.12 for 2019-2020 @t1"
"e","   ","","366","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","369","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","   ","","385","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","388","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","   ","","477","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","480","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","508","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","510","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","538","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","  ","","540","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","569","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","   ","","570","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","594","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","","def main():
    maze = Maze.load_maze(""maze.txt"")

    try","2145","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","# put the line ""if VERBOSE: printMaze(maze)""
# every time you drop/retrieve a marker

# TODO: write all your code above this line


def readMaze(maze):
    mazefile = open(FILENAME, ""r"")
    for line in mazefile.read().splitlines():
        maze.append([])
        for c in line","","2145","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","","sy, sx = maze.find_start()
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""no solution found"")
    except ValueError:
        print(""No start point found.""","2433","1650575234979","main.py","1.1.12 for 2019-2020 @t1"
"e","    maze[-1].append(c)
    mazefile.close()


def printMaze(maze):
    print(""\n\n\n\n\n\n\n\n\n"")
    for i in range(0, len(maze)):
        for j in range(0, len(maze[i])):
            print(maze[i][j], end="""")
        print()
    time.sleep(SLEEPTIME)
    print()


def main():
    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze","","2433","1650575234980","main.py","1.1.12 for 2019-2020 @t1"
"e","","
    def __int__(self, start, end):
        self.start = start
        self.end = end","216","1650575251518","main.py","1.1.12 for 2019-2020 @t1"
"e","","t","238","1650575254644","main.py","1.1.12 for 2019-2020 @t1"
"e","","r","237","1650575254830","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","236","1650575255019","main.py","1.1.12 for 2019-2020 @t1"
"e","","t","235","1650575255198","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","234","1650575255455","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","234","1650575256289","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","235","1650575256293","main.py","1.1.12 for 2019-2020 @t1"
"k","""",,"235","1650575256293","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","235","1650575256493","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"236","1650575256494","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","254","1650575258015","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","253","1650575258206","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","252","1650575258377","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","252","1650575258870","main.py","1.1.12 for 2019-2020 @t1"
"e","""","","253","1650575258875","main.py","1.1.12 for 2019-2020 @t1"
"k","""",,"253","1650575258875","main.py","1.1.12 for 2019-2020 @t1"
"e","W","","253","1650575259105","main.py","1.1.12 for 2019-2020 @t1"
"k","W",,"254","1650575259105","main.py","1.1.12 for 2019-2020 @t1"
"e","","W","253","1650575260294","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","253","1650575260928","main.py","1.1.12 for 2019-2020 @t1"
"k","E",,"254","1650575260929","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","514","1650575276725","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","511","1650575276728","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","485","1650575278487","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","482","1650575278491","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","454","1650575279905","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","451","1650575279909","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","424","1650575282708","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","421","1650575282711","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","393","1650575284619","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","390","1650575284623","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","301","1650575286558","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","298","1650575286562","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","282","1650575288534","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","279","1650575288537","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","263","1650575295339","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","260","1650575295342","main.py","1.1.12 for 2019-2020 @t1"
"e","","E","246","1650575302289","main.py","1.1.12 for 2019-2020 @t1"
"e","E","","246","1650575303572","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","245","1650575310134","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","242","1650575310142","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","225","1650575311843","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","222","1650575311847","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maze","211","1650575320459","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","211","1650575320463","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"212","1650575320463","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","212","1650575320605","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"213","1650575320610","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","213","1650575320802","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"214","1650575320803","main.py","1.1.12 for 2019-2020 @t1"
"e","v","","214","1650575321321","main.py","1.1.12 for 2019-2020 @t1"
"k","v",,"215","1650575321323","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","215","1650575321521","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"216","1650575321521","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","211","1650575330463","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","211","1650575330602","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"212","1650575330603","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maze","1202","1650575343558","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","1202","1650575343564","main.py","1.1.12 for 2019-2020 @t1"
"k","S",,"1203","1650575343566","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","1203","1650575344251","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"1204","1650575344257","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","1204","1650575344455","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"1205","1650575344461","main.py","1.1.12 for 2019-2020 @t1"
"e","v","","1205","1650575344535","main.py","1.1.12 for 2019-2020 @t1"
"k","v",,"1206","1650575344538","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","1206","1650575344714","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"1207","1650575344715","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","1206","1650575348928","main.py","1.1.12 for 2019-2020 @t1"
"e","","v","1205","1650575348933","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","1204","1650575348938","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","1203","1650575348942","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","1202","1650575348947","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze","","1202","1650575348951","main.py","1.1.12 for 2019-2020 @t1"
"e","","s","211","1650575354632","main.py","1.1.12 for 2019-2020 @t1"
"e","S","","211","1650575355068","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","215","1650575355799","main.py","1.1.12 for 2019-2020 @t1"
"e","","v","214","1650575355804","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","213","1650575355808","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","212","1650575355813","main.py","1.1.12 for 2019-2020 @t1"
"e","","S","211","1650575355818","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze","","211","1650575355824","main.py","1.1.12 for 2019-2020 @t1"
"e","","solve","2630","1650575399406","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","2630","1650575399409","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"2631","1650575399410","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2631","1650575399613","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2632","1650575399618","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2632","1650575399851","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"2633","1650575399854","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2633","1650575400039","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2634","1650575400043","main.py","1.1.12 for 2019-2020 @t1"
"e","",", 1, 0","2639","1650575408881","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2560","1650575452075","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2534","1650575452078","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2518","1650575452082","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2480","1650575452085","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2439","1650575452089","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2405","1650575452092","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2373","1650575452095","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2352","1650575452098","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2351","1650575452101","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2350","1650575452105","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2329","1650575452108","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2298","1650575452111","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2275","1650575452114","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2251","1650575452118","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2205","1650575452121","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2170","1650575452124","main.py","1.1.12 for 2019-2020 @t1"
"e","# ","","2150","1650575452127","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2150","1650575457833","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2170","1650575457836","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2205","1650575457839","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2251","1650575457842","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2275","1650575457845","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2298","1650575457848","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2329","1650575457850","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2350","1650575457853","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2351","1650575457856","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2352","1650575457859","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2373","1650575457861","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2405","1650575457864","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2439","1650575457866","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2480","1650575457869","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2518","1650575457871","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2534","1650575457874","main.py","1.1.12 for 2019-2020 @t1"
"e","","# ","2560","1650575457876","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"2017","1650575749555","main.py","1.1.12 for 2019-2020 @t1"
"e","if VERBOSE: printMaze(maze)","","2017","1650575749561","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: printMaze(maze)","2017","1650575751949","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"2103","1650575753434","main.py","1.1.12 for 2019-2020 @t1"
"e","if VERBOSE: printMaze(maze)","","2103","1650575753439","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: printMaze(maze)","2103","1650575754533","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","218","1650575757982","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","217","1650575757990","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"221","1650575758247","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","217","1650575758250","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: printMaze(maze)","","217","1650575758253","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","233","1650575760998","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","234","1650575761006","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","241","1650575763706","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","238","1650575763710","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","237","1650575764251","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","234","1650575764255","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","233","1650575764505","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","233","1650575765403","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"234","1650575765405","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","234","1650575765572","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"235","1650575765576","main.py","1.1.12 for 2019-2020 @t1"
"e","f","","235","1650575765693","main.py","1.1.12 for 2019-2020 @t1"
"k","f",,"236","1650575765698","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","236","1650575765868","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"237","1650575765869","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","236","1650575766715","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","236","1650575767401","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"237","1650575767401","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","236","1650575767811","main.py","1.1.12 for 2019-2020 @t1"
"e","","f","235","1650575768014","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","234","1650575768185","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","233","1650575768356","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","233","1650575770761","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","234","1650575770769","main.py","1.1.12 for 2019-2020 @t1"
"e","","    if VERBOSE: 
        printMaze(maze)","217","1650575774258","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","218","1650575774932","main.py","1.1.12 for 2019-2020 @t1"
"p","    if VERBOSE: 
        printMaze(maze)",,"203","1650575778754","main.py","1.1.12 for 2019-2020 @t1"
"e","if VERBOSE: 
    printMaze(maze)","","203","1650575778758","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","214","1650575778766","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","218","1650575783364","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","215","1650575783367","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","214","1650575783604","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","214","1650575784723","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"215","1650575784724","main.py","1.1.12 for 2019-2020 @t1"
"e","def printMaze(maze):
    pass","","203","1650575873943","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","232","1650575873955","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","203","1650575873963","main.py","1.1.12 for 2019-2020 @t1"
"e","

","","235","1650575873966","main.py","1.1.12 for 2019-2020 @t1"
"e","","def printMaze(maze):
    pass","205","1650575873978","main.py","1.1.12 for 2019-2020 @t1"
"e","def printMaze():
    ","","205","1650575873989","main.py","1.1.12 for 2019-2020 @t1"
"e","maze","","219","1650575874002","main.py","1.1.12 for 2019-2020 @t1"
"e","pass","","230","1650575874009","main.py","1.1.12 for 2019-2020 @t1"
"e","","def printMaze(maze):
    pass
","205","1650575884701","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","206","1650575885578","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","205","1650575885778","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","204","1650575886233","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","204","1650575887115","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: printMaze(maze)","205","1650575889906","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","206","1650575890974","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","205","1650575891205","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","204","1650575891423","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","204","1650575894193","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","2586","1650575909746","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2586","1650575909758","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"2590","1650575910109","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2586","1650575910114","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: printMaze(maze)","","2586","1650575910118","main.py","1.1.12 for 2019-2020 @t1"
"e","","    if VERBOSE: printMaze(maze)","2586","1650575913371","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2586","1650575913375","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2589","1650575914664","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2586","1650575914668","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","2586","1650575914987","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","2619","1650575918137","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: printMaze(maze)",,"2623","1650575918798","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2619","1650575918802","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: printMaze(maze)","","2619","1650575918806","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","2635","1650575929046","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2636","1650575929056","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","2660","1650575932578","main.py","1.1.12 for 2019-2020 @t1"
"e","","True","107","1650575941378","main.py","1.1.12 for 2019-2020 @t1"
"e","F","","107","1650575941384","main.py","1.1.12 for 2019-2020 @t1"
"k","F",,"108","1650575941385","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","108","1650575941615","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"109","1650575941622","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","109","1650575942205","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"110","1650575942213","main.py","1.1.12 for 2019-2020 @t1"
"e","s","","110","1650575942280","main.py","1.1.12 for 2019-2020 @t1"
"k","s",,"111","1650575942282","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","111","1650575942387","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"112","1650575942392","main.py","1.1.12 for 2019-2020 @t1"
"e","","False","107","1650575948184","main.py","1.1.12 for 2019-2020 @t1"
"e","T","","107","1650575948187","main.py","1.1.12 for 2019-2020 @t1"
"k","T",,"108","1650575948188","main.py","1.1.12 for 2019-2020 @t1"
"e","r","","108","1650575948436","main.py","1.1.12 for 2019-2020 @t1"
"k","r",,"109","1650575948454","main.py","1.1.12 for 2019-2020 @t1"
"e","u","","109","1650575948571","main.py","1.1.12 for 2019-2020 @t1"
"k","u",,"110","1650575948578","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","110","1650575948673","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"111","1650575948686","main.py","1.1.12 for 2019-2020 @t1"
"e","","import sys
","12","1650575997010","main.py","1.1.12 for 2019-2020 @t1"
"e","import sys
","","12","1650576002855","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","2768","1650576063285","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","2777","1650576063510","main.py","1.1.12 for 2019-2020 @t1"
"p","try:
        sy, sx = maze.find_start()
        print(""solving..."")
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")",,"2785","1650576063753","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","2777","1650576063758","main.py","1.1.12 for 2019-2020 @t1"
"e","        try:
                sy, sx = maze.find_start()
                print(""solving..."")
                if maze.solve(sy, sx):
                    print(maze)
                else:
                    print(""    no solution found"")
            except ValueError:
                print(""No start point found."")","","2777","1650576063761","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","2768","1650576063771","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2794","1650576063774","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2833","1650576063777","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2865","1650576063780","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2904","1650576063783","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2928","1650576063786","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2950","1650576063789","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2989","1650576063792","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","3020","1650576063794","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","3020","1650576064602","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2989","1650576064606","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2950","1650576064609","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2928","1650576064612","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2904","1650576064615","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2865","1650576064618","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2833","1650576064621","main.py","1.1.12 for 2019-2020 @t1"
"e","    ","","2794","1650576064624","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","2768","1650576064627","main.py","1.1.12 for 2019-2020 @t1"
"e","","        try:
                sy, sx = maze.find_start()
                print(""solving..."")
                if maze.solve(sy, sx):
                    print(maze)
                else:
                    print(""    no solution found"")
            except ValueError:
                print(""No start point found."")","2777","1650576064631","main.py","1.1.12 for 2019-2020 @t1"
"e","        ","","2777","1650576064634","main.py","1.1.12 for 2019-2020 @t1"
"p","try:
        sy, sx = maze.find_start()
        print(""solving..."")
        if maze.solve(sy, sx):
            print(maze)
        else:
            print(""    no solution found"")
    except ValueError:
        print(""No start point found."")",,"2781","1650576067925","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","2777","1650576067935","main.py","1.1.12 for 2019-2020 @t1"
"e","    try:
            sy, sx = maze.find_start()
            print(""solving..."")
            if maze.solve(sy, sx):
                print(maze)
            else:
                print(""    no solution found"")
        except ValueError:
            print(""No start point found."")","","2777","1650576067941","main.py","1.1.12 for 2019-2020 @t1"
"e","","        ","2768","1650576067949","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2786","1650576067952","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2821","1650576067955","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2849","1650576067958","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2884","1650576067960","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2904","1650576067963","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2922","1650576067965","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2953","1650576067968","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2984","1650576067971","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2747","1650576071286","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2737","1650576071296","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2695","1650576071303","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2672","1650576071306","main.py","1.1.12 for 2019-2020 @t1"
"e","","[]","2597","1650576097858","main.py","1.1.12 for 2019-2020 @t1"
"e","F","","2597","1650576101545","main.py","1.1.12 for 2019-2020 @t1"
"k","F",,"2598","1650576101548","main.py","1.1.12 for 2019-2020 @t1"
"e","I","","2598","1650576101811","main.py","1.1.12 for 2019-2020 @t1"
"k","I",,"2599","1650576101817","main.py","1.1.12 for 2019-2020 @t1"
"e","L","","2599","1650576102054","main.py","1.1.12 for 2019-2020 @t1"
"k","L",,"2600","1650576102065","main.py","1.1.12 for 2019-2020 @t1"
"e","ENAME","","2600","1650576102355","main.py","1.1.12 for 2019-2020 @t1"
"e","","readMaze(maze)
    ","2610","1650576113931","main.py","1.1.12 for 2019-2020 @t1"
"p","maze = Maze.load_maze(""somemaze.txt"")",,"2590","1650576134878","main.py","1.1.12 for 2019-2020 @t1"
"e","","FILENAME","2597","1650576134884","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze.load_maze(""somemaze.txt"")","","2597","1650576134885","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","2628","1650576136921","main.py","1.1.12 for 2019-2020 @t1"
"p","""maze.txt""",,"2621","1650576149136","main.py","1.1.12 for 2019-2020 @t1"
"e","","somemaze","2613","1650576149141","main.py","1.1.12 for 2019-2020 @t1"
"e","""maze.txt""","","2613","1650576149142","main.py","1.1.12 for 2019-2020 @t1"
"e","","""maze.txt""","2613","1650576150934","main.py","1.1.12 for 2019-2020 @t1"
"e","somemaze","","2613","1650576150935","main.py","1.1.12 for 2019-2020 @t1"
"e","","somemaze.txt""","2613","1650576153900","main.py","1.1.12 for 2019-2020 @t1"
"e","","""","2612","1650576154054","main.py","1.1.12 for 2019-2020 @t1"
"p","""maze.txt""",,"2612","1650576154266","main.py","1.1.12 for 2019-2020 @t1"
"e","""maze.txt""","","2612","1650576154272","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2649","1650576168735","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2632","1650576168739","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2951","1650576195078","main.py","1.1.12 for 2019-2020 @t1"
"e","","n","2951","1650576197007","main.py","1.1.12 for 2019-2020 @t1"
"e","N","","2951","1650576197627","main.py","1.1.12 for 2019-2020 @t1"
"k","N",,"2952","1650576197628","main.py","1.1.12 for 2019-2020 @t1"
"e","","    print(""solving..."")
    ","2839","1650576203029","main.py","1.1.12 for 2019-2020 @t1"
"e","        
","","2835","1650576203835","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2651","1650576259334","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2632","1650576259339","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","2629","1650576297162","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","2628","1650576299901","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"2629","1650576299902","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2629","1650576300054","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2630","1650576300060","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2630","1650576300317","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"2631","1650576300328","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2631","1650576300564","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2632","1650576300574","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","2631","1650576304324","main.py","1.1.12 for 2019-2020 @t1"
"e","","z","2630","1650576304488","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","2629","1650576304640","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2628","1650576304830","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","2628","1650576305243","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"2629","1650576305243","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","2629","1650576305494","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"2630","1650576305498","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2630","1650576305660","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2631","1650576305670","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2631","1650576305877","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2632","1650576305884","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2632","1650576306063","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2633","1650576306074","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2633","1650576306248","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2634","1650576306267","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","2634","1650576306669","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"2635","1650576306670","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2635","1650576306821","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2636","1650576306823","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2636","1650576307029","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"2637","1650576307029","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2637","1650576307230","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2638","1650576307232","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2638","1650576308053","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2639","1650576308054","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2638","1650576308720","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","2637","1650576308899","main.py","1.1.12 for 2019-2020 @t1"
"e","","z","2636","1650576309067","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","2635","1650576309232","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2634","1650576309399","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","2634","1650576309936","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"2635","1650576309937","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2635","1650576310315","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2636","1650576310316","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2636","1650576310637","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"2637","1650576310638","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2637","1650576310824","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2638","1650576310825","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2638","1650576311371","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2639","1650576311372","main.py","1.1.12 for 2019-2020 @t1"
"e","=","","2639","1650576311580","main.py","1.1.12 for 2019-2020 @t1"
"k","=",,"2640","1650576311581","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2640","1650576311709","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2641","1650576311709","main.py","1.1.12 for 2019-2020 @t1"
"e","[","","2641","1650576313216","main.py","1.1.12 for 2019-2020 @t1"
"e","]","","2642","1650576313221","main.py","1.1.12 for 2019-2020 @t1"
"k","[",,"2642","1650576313221","main.py","1.1.12 for 2019-2020 @t1"
"p","readMaze(maze)",,"2628","1650576332480","main.py","1.1.12 for 2019-2020 @t1"
"e","","loadedMaze = []","2628","1650576332515","main.py","1.1.12 for 2019-2020 @t1"
"e","readMaze(maze)","","2628","1650576332516","main.py","1.1.12 for 2019-2020 @t1"
"e","    
","","2624","1650576335359","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","2628","1650576335704","main.py","1.1.12 for 2019-2020 @t1"
"k","m",,"2629","1650576335704","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2629","1650576335855","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2630","1650576335860","main.py","1.1.12 for 2019-2020 @t1"
"e","z","","2630","1650576336119","main.py","1.1.12 for 2019-2020 @t1"
"k","z",,"2631","1650576336135","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2631","1650576337404","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2632","1650576337408","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2632","1650576337760","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2633","1650576337760","main.py","1.1.12 for 2019-2020 @t1"
"e","=","","2633","1650576337888","main.py","1.1.12 for 2019-2020 @t1"
"k","=",,"2634","1650576337889","main.py","1.1.12 for 2019-2020 @t1"
"e"," ","","2634","1650576338030","main.py","1.1.12 for 2019-2020 @t1"
"k"," ",,"2635","1650576338031","main.py","1.1.12 for 2019-2020 @t1"
"e","[","","2635","1650576338270","main.py","1.1.12 for 2019-2020 @t1"
"e","]","","2636","1650576338276","main.py","1.1.12 for 2019-2020 @t1"
"k","[",,"2636","1650576338276","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","2628","1650576351282","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"2629","1650576351284","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","2629","1650576351466","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"2630","1650576351470","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2630","1650576351593","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2631","1650576351597","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2631","1650576351778","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2632","1650576351787","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2632","1650576351961","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2633","1650576351966","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2633","1650576352170","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2634","1650576352180","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2634","1650576353830","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","2634","1650576354143","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"2635","1650576354144","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","2657","1650576357310","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"2658","1650576357311","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","2658","1650576357547","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"2659","1650576357553","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2659","1650576357732","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2660","1650576357742","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2660","1650576357944","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2661","1650576357956","main.py","1.1.12 for 2019-2020 @t1"
"e","e","","2661","1650576358135","main.py","1.1.12 for 2019-2020 @t1"
"k","e",,"2662","1650576358139","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2662","1650576358351","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2663","1650576358358","main.py","1.1.12 for 2019-2020 @t1"
"e","Maze","","2663","1650576358675","main.py","1.1.12 for 2019-2020 @t1"
"e","","maze","2667","1650576358687","main.py","1.1.12 for 2019-2020 @t1"
"e","maze","","2667","1650576366935","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maze","2663","1650576366940","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","2662","1650576367478","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","2661","1650576367481","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","2660","1650576367484","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","2659","1650576367486","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","2658","1650576367489","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","2657","1650576367492","main.py","1.1.12 for 2019-2020 @t1"
"e","","M","2634","1650576368280","main.py","1.1.12 for 2019-2020 @t1"
"e","m","","2634","1650576368675","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","2633","1650576369490","main.py","1.1.12 for 2019-2020 @t1"
"e","","e","2632","1650576369493","main.py","1.1.12 for 2019-2020 @t1"
"e","","d","2631","1650576369496","main.py","1.1.12 for 2019-2020 @t1"
"e","","a","2630","1650576369499","main.py","1.1.12 for 2019-2020 @t1"
"e","","o","2629","1650576369502","main.py","1.1.12 for 2019-2020 @t1"
"e","","l","2628","1650576369505","main.py","1.1.12 for 2019-2020 @t1"
"e","l","","2590","1650576372665","main.py","1.1.12 for 2019-2020 @t1"
"k","l",,"2591","1650576372667","main.py","1.1.12 for 2019-2020 @t1"
"e","o","","2591","1650576372882","main.py","1.1.12 for 2019-2020 @t1"
"k","o",,"2592","1650576372889","main.py","1.1.12 for 2019-2020 @t1"
"e","a","","2592","1650576372986","main.py","1.1.12 for 2019-2020 @t1"
"k","a",,"2593","1650576372990","main.py","1.1.12 for 2019-2020 @t1"
"e","d","","2593","1650576373180","main.py","1.1.12 for 2019-2020 @t1"
"k","d",,"2594","1650576373191","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2594","1650576375358","main.py","1.1.12 for 2019-2020 @t1"
"e","M","","2594","1650576375824","main.py","1.1.12 for 2019-2020 @t1"
"k","M",,"2595","1650576375826","main.py","1.1.12 for 2019-2020 @t1"
"p","loadMaze",,"2892","1650576382314","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2888","1650576382318","main.py","1.1.12 for 2019-2020 @t1"
"e","loadM","","2888","1650576382319","main.py","1.1.12 for 2019-2020 @t1"
"p","loadMaze",,"2934","1650576384748","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2930","1650576384761","main.py","1.1.12 for 2019-2020 @t1"
"e","loadM","","2930","1650576384762","main.py","1.1.12 for 2019-2020 @t1"
"p","loadMaze",,"2854","1650576392360","main.py","1.1.12 for 2019-2020 @t1"
"e","","m","2850","1650576392368","main.py","1.1.12 for 2019-2020 @t1"
"e","loadM","","2850","1650576392369","main.py","1.1.12 for 2019-2020 @t1"
"p","    maze = []
    readMaze(maze)
    if not solve(maze, 1, 0):
        print(""no solution is possible."")
    else:
        printMaze(maze)",,"2716","1650576606529","main.py","1.1.12 for 2019-2020 @t1"
"e","","#","2720","1650576606549","main.py","1.1.12 for 2019-2020 @t1"
"e","maze = []
    readMaze(maze)
   ","","2720","1650576606550","main.py","1.1.12 for 2019-2020 @t1"
"e","","Maz","2760","1650576606549","main.py","1.1.12 for 2019-2020 @t1"
"e","solv","","2760","1650576606550","main.py","1.1.12 for 2019-2020 @t1"
"e",", 1, 0","","2770","1650576606551","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2782","1650576606552","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2824","1650576606549","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2834","1650576606549","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","Lockout","214161","1650576606593","main.py","1.1.12 for 2019-2020 @t1"
"t","Attention","-1:-1:-1","214161","1650576607813","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2834","1650576610375","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2824","1650576610388","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2782","1650576610399","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2752","1650576610411","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2733","1650576610423","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2719","1650576610431","main.py","1.1.12 for 2019-2020 @t1"
"e","","    maze = []
    readMaze(maze)","2628","1650576616878","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","2628","1650576617533","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2631","1650576619507","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2628","1650576619515","main.py","1.1.12 for 2019-2020 @t1"
"e","","if VERBOSE: 
        printMaze(maze)","2633","1650576625385","main.py","1.1.12 for 2019-2020 @t1"
"e","
    ","","2793","1650576627055","main.py","1.1.12 for 2019-2020 @t1"
"p","if VERBOSE: 
        printMaze(maze)",,"2798","1650576627470","main.py","1.1.12 for 2019-2020 @t1"
"e","","    ","2794","1650576627482","main.py","1.1.12 for 2019-2020 @t1"
"e","    if VERBOSE: 
            printMaze(maze)","","2794","1650576627494","main.py","1.1.12 for 2019-2020 @t1"
"e",""," 
    ","2809","1650576627510","main.py","1.1.12 for 2019-2020 @t1"
"e","
","","2809","1650576627511","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2813","1650576630597","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2797","1650576630609","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2641","1650576633377","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2638","1650576633389","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2637","1650576633536","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2634","1650576633548","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","2634","1650576633720","main.py","1.1.12 for 2019-2020 @t1"
"e",""," ","2632","1650576633924","main.py","1.1.12 for 2019-2020 @t1"
"e","","   ","2629","1650576633936","main.py","1.1.12 for 2019-2020 @t1"
"e","","
","2629","1650576634239","main.py","1.1.12 for 2019-2020 @t1"
"e","","import sys
","12","1650576674696","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2637","1650576757828","main.py","1.1.12 for 2019-2020 @t1"
"e",""," #","2621","1650576757840","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2635","1650576761448","main.py","1.1.12 for 2019-2020 @t1"
"e"," #","","2621","1650576761456","main.py","1.1.12 for 2019-2020 @t1"
